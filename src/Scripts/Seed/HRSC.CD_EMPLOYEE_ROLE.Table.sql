
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_EMPLOYEE_ROLE] ON

DECLARE @mergeOutput1351675863 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_EMPLOYEE_ROLE] AS [Target]
USING (VALUES
  (8,N'Development Administrator',N'Administrateur développement',N'Development Administrator',N'Administrateur développement','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'1')
 ,(9,N'HR System Administrator',N'Administrateur de système RH',N'HR System Administrator',N'Administrateur de système RH','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'2')
 ,(10,N'HRSC Manager',N'Gestionnaire CSRH',N'HRSC Manager',N'Gestionnaire CSRH','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'3')
 ,(13,N'HRSC Dispatcher',N'Répartiteur SCRH',N'HRSC Dispatcher',N'Répartiteur SCRH','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'6')
 ,(14,N'Client',N'Client',N'Client',N'Client','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'CLI')
 ,(17,N'Manager',N'Gestionnaire',N'Manager',N'Gestionnaire','2012-01-11T00:00:00',NULL,N'Éric',NULL,'2012-01-11T00:00:00',NULL,N'MAN')
 ,(20,N'Contact',N'Contact',N'Contact',N'Contact','2012-01-11T00:00:00.580',NULL,N'Éric',NULL,'2012-01-11T00:00:00.580',NULL,N'AMAN')
 ,(21,N'Lead',N'Leader',N'Lead',N'Leader','2012-01-11T14:27:19.347',NULL,N'Éric',NULL,'2012-01-11T14:27:19.347',NULL,N'LEAD')
 ,(24,N'Collaborator',N'Collaborateur',N'Collaborator',N'Collaborateur','2012-01-11T00:00:00.547',NULL,N'Éric',NULL,'2012-01-11T00:00:00.547',NULL,N'COL')
 ,(28,N'Sub-Delegated Manager',N'Gestionnaire sous-délégué',N'Sub-Delegated Manager',N'Gestionnaire sous-délégué','2012-01-25T00:00:00',NULL,N'Alain',NULL,'2013-01-25T15:39:40.420',NULL,N'SDEL')
 ,(29,N'Host Manager',N'Gestionnaire de l’organisme d’accueil',N'Host Manager',N'Gestionnaire de l’organisme d’accueil','2012-01-28T00:00:00',NULL,N'Elena',NULL,'2012-01-28T00:00:00',NULL,N'HOST')
 ,(30,N'Submitted by',N'Soumis par',N'Submitted by',N'Soumis par','2013-01-31T00:00:00',NULL,N'Alain',NULL,'2013-01-31T00:00:00',NULL,N'SUBM')
 ,(31,N'Submitter',N'Appliquant',N'Submitter',N'Appliquant','2013-05-06T15:55:04.607',NULL,N'tony.paradis',NULL,'2013-05-06T15:55:04.607',NULL,N'SUBTR')
 ,(32,N'Administrative',N'Adjoint',N'Administrative',N'Adjoint','2013-05-06T15:55:49.990',NULL,N'tony.paradis',NULL,'2013-05-06T15:55:49.990',NULL,N'SBADM')
 ,(33,N'Supervisor',N'Superviseur',N'Supervisor',N'Superviseur','2015-03-30T07:42:47.627',NULL,N'yves.robichaud',NULL,'2015-03-30T07:42:47.627',NULL,N'SUPER')
) AS [Source] ([EMPLOYEE_ROLE_ID],[EMPLOYEE_ROLE_NAME_EN],[EMPLOYEE_ROLE_NAME_FR],[EMPLOYEE_ROLE_DESC_EN],[EMPLOYEE_ROLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EMPLOYEE_ROLE_CODE])
ON ([Target].[EMPLOYEE_ROLE_ID] = [Source].[EMPLOYEE_ROLE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[EMPLOYEE_ROLE_NAME_EN], [Target].[EMPLOYEE_ROLE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[EMPLOYEE_ROLE_NAME_EN], [Source].[EMPLOYEE_ROLE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[EMPLOYEE_ROLE_NAME_FR], [Target].[EMPLOYEE_ROLE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[EMPLOYEE_ROLE_NAME_FR], [Source].[EMPLOYEE_ROLE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[EMPLOYEE_ROLE_DESC_EN], [Target].[EMPLOYEE_ROLE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[EMPLOYEE_ROLE_DESC_EN], [Source].[EMPLOYEE_ROLE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[EMPLOYEE_ROLE_DESC_FR], [Target].[EMPLOYEE_ROLE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[EMPLOYEE_ROLE_DESC_FR], [Source].[EMPLOYEE_ROLE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[EMPLOYEE_ROLE_CODE], [Target].[EMPLOYEE_ROLE_CODE]) IS NOT NULL OR NULLIF([Target].[EMPLOYEE_ROLE_CODE], [Source].[EMPLOYEE_ROLE_CODE]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[EMPLOYEE_ROLE_NAME_EN] = [Source].[EMPLOYEE_ROLE_NAME_EN], 
  [Target].[EMPLOYEE_ROLE_NAME_FR] = [Source].[EMPLOYEE_ROLE_NAME_FR], 
  [Target].[EMPLOYEE_ROLE_DESC_EN] = [Source].[EMPLOYEE_ROLE_DESC_EN], 
  [Target].[EMPLOYEE_ROLE_DESC_FR] = [Source].[EMPLOYEE_ROLE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[EMPLOYEE_ROLE_CODE] = [Source].[EMPLOYEE_ROLE_CODE]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([EMPLOYEE_ROLE_ID],[EMPLOYEE_ROLE_NAME_EN],[EMPLOYEE_ROLE_NAME_FR],[EMPLOYEE_ROLE_DESC_EN],[EMPLOYEE_ROLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EMPLOYEE_ROLE_CODE])
 VALUES([Source].[EMPLOYEE_ROLE_ID],[Source].[EMPLOYEE_ROLE_NAME_EN],[Source].[EMPLOYEE_ROLE_NAME_FR],[Source].[EMPLOYEE_ROLE_DESC_EN],[Source].[EMPLOYEE_ROLE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[EMPLOYEE_ROLE_CODE])
OUTPUT $action INTO @mergeOutput1351675863;

DECLARE @mergeError1351675863 int,
@mergeCount1351675863 int,
@mergeCountIns1351675863 int,
@mergeCountUpd1351675863 int,
@mergeCountDel1351675863 int
SELECT @mergeError1351675863 = @@ERROR
SELECT @mergeCount1351675863 = COUNT(1), @mergeCountIns1351675863 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1351675863 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1351675863 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1351675863
IF @mergeError1351675863 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_EMPLOYEE_ROLE]. Rows affected: ' + CAST(@mergeCount1351675863 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_EMPLOYEE_ROLE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1351675863,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1351675863,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1351675863,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1351675863,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_EMPLOYEE_ROLE] OFF
SET NOCOUNT OFF




