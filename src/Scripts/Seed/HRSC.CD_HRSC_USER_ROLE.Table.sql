
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_HRSC_USER_ROLE] ON

DECLARE @mergeOutput1591676718 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_HRSC_USER_ROLE] AS [Target]
USING (VALUES
  (3,N'IITB Support',N'DGITT support',N'Innovation, Information and Technology Branch',N'Direction générale de l’innovation, de l’information et de la technologie ','2012-01-12T15:21:07.543',NULL,N'System',NULL,'2012-01-12T15:21:07.543',NULL,N'IITB')
 ,(4,N'HRSC management',N'Gestion CSRH',N'Super Administrator',N'Super administrateur','2012-01-12T15:23:14.380',NULL,N'System',NULL,'2012-01-12T15:23:14.380',NULL,N'ADMIN')
 ,(5,N'BC management',N'Gestion CA',N'report, manage user for his/their BC…',N'raport, gestion des usager pour ou leur centre d''affaire...','2012-01-12T15:24:59.750',NULL,N'System',NULL,'2012-01-12T15:24:59.750',NULL,N'BCM')
 ,(6,N'BC Employee',N'Employé CA',N'process request',N'processus des demandes','2012-01-12T15:26:26.903',NULL,N'System',NULL,'2012-01-12T15:26:26.903',NULL,N'BCE')
) AS [Source] ([HRSC_USER_ROLE_ID],[HRSC_USER_ROLE_NAME_EN],[HRSC_USER_ROLE_NAME_FR],[HRSC_USER_ROLE_DESC_EN],[HRSC_USER_ROLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[HRSC_USER_ROLE_CODE])
ON ([Target].[HRSC_USER_ROLE_ID] = [Source].[HRSC_USER_ROLE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[HRSC_USER_ROLE_NAME_EN], [Target].[HRSC_USER_ROLE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[HRSC_USER_ROLE_NAME_EN], [Source].[HRSC_USER_ROLE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[HRSC_USER_ROLE_NAME_FR], [Target].[HRSC_USER_ROLE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[HRSC_USER_ROLE_NAME_FR], [Source].[HRSC_USER_ROLE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[HRSC_USER_ROLE_DESC_EN], [Target].[HRSC_USER_ROLE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[HRSC_USER_ROLE_DESC_EN], [Source].[HRSC_USER_ROLE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[HRSC_USER_ROLE_DESC_FR], [Target].[HRSC_USER_ROLE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[HRSC_USER_ROLE_DESC_FR], [Source].[HRSC_USER_ROLE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[HRSC_USER_ROLE_CODE], [Target].[HRSC_USER_ROLE_CODE]) IS NOT NULL OR NULLIF([Target].[HRSC_USER_ROLE_CODE], [Source].[HRSC_USER_ROLE_CODE]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[HRSC_USER_ROLE_NAME_EN] = [Source].[HRSC_USER_ROLE_NAME_EN], 
  [Target].[HRSC_USER_ROLE_NAME_FR] = [Source].[HRSC_USER_ROLE_NAME_FR], 
  [Target].[HRSC_USER_ROLE_DESC_EN] = [Source].[HRSC_USER_ROLE_DESC_EN], 
  [Target].[HRSC_USER_ROLE_DESC_FR] = [Source].[HRSC_USER_ROLE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[HRSC_USER_ROLE_CODE] = [Source].[HRSC_USER_ROLE_CODE]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([HRSC_USER_ROLE_ID],[HRSC_USER_ROLE_NAME_EN],[HRSC_USER_ROLE_NAME_FR],[HRSC_USER_ROLE_DESC_EN],[HRSC_USER_ROLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[HRSC_USER_ROLE_CODE])
 VALUES([Source].[HRSC_USER_ROLE_ID],[Source].[HRSC_USER_ROLE_NAME_EN],[Source].[HRSC_USER_ROLE_NAME_FR],[Source].[HRSC_USER_ROLE_DESC_EN],[Source].[HRSC_USER_ROLE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[HRSC_USER_ROLE_CODE])
OUTPUT $action INTO @mergeOutput1591676718;

DECLARE @mergeError1591676718 int,
@mergeCount1591676718 int,
@mergeCountIns1591676718 int,
@mergeCountUpd1591676718 int,
@mergeCountDel1591676718 int
SELECT @mergeError1591676718 = @@ERROR
SELECT @mergeCount1591676718 = COUNT(1), @mergeCountIns1591676718 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1591676718 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1591676718 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1591676718
IF @mergeError1591676718 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_HRSC_USER_ROLE]. Rows affected: ' + CAST(@mergeCount1591676718 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_HRSC_USER_ROLE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1591676718,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1591676718,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1591676718,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1591676718,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_HRSC_USER_ROLE] OFF
SET NOCOUNT OFF




