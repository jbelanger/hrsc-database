
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_SERVICE] ON

DECLARE @mergeOutput770101784 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_SERVICE] AS [Target]
USING (VALUES
  (1,N'SPUB',N'Services to the Public',N'Services au public',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
 ,(3,N'CSRV',N'Central Services',N'Services centraux',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
 ,(4,N'PSRV',N'Personal Services',N'Services personnels',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
 ,(5,N'SUPRF',N'Supervisory Functions (EX and non EX)',N'Fonctions de supervision (EX et non EX)',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
 ,(7,N'FRML',N'Formal level in grievance process',N'Palier officiel d’une procédure de griefs',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
 ,(8,N'ZOTH',N'Other, Please specify (attach annex if insufficient space):',N'Autre, veuillez préciser (ajouter une annexe si l’espace est insuffisante):',NULL,NULL,NULL,'2013-02-22T00:00:00',N'seddon','2013-02-22T00:00:00',NULL,NULL)
) AS [Source] ([SERVICE_ID],[SERVICE_CODE],[SERVICE_NAME_EN],[SERVICE_NAME_FR],[SERVICE_DESC_EN],[SERVICE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[SERVICE_ID] = [Source].[SERVICE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[SERVICE_CODE], [Target].[SERVICE_CODE]) IS NOT NULL OR NULLIF([Target].[SERVICE_CODE], [Source].[SERVICE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[SERVICE_NAME_EN], [Target].[SERVICE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[SERVICE_NAME_EN], [Source].[SERVICE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[SERVICE_NAME_FR], [Target].[SERVICE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[SERVICE_NAME_FR], [Source].[SERVICE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[SERVICE_DESC_EN], [Target].[SERVICE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[SERVICE_DESC_EN], [Source].[SERVICE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[SERVICE_DESC_FR], [Target].[SERVICE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[SERVICE_DESC_FR], [Source].[SERVICE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[SERVICE_CODE] = [Source].[SERVICE_CODE], 
  [Target].[SERVICE_NAME_EN] = [Source].[SERVICE_NAME_EN], 
  [Target].[SERVICE_NAME_FR] = [Source].[SERVICE_NAME_FR], 
  [Target].[SERVICE_DESC_EN] = [Source].[SERVICE_DESC_EN], 
  [Target].[SERVICE_DESC_FR] = [Source].[SERVICE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([SERVICE_ID],[SERVICE_CODE],[SERVICE_NAME_EN],[SERVICE_NAME_FR],[SERVICE_DESC_EN],[SERVICE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[SERVICE_ID],[Source].[SERVICE_CODE],[Source].[SERVICE_NAME_EN],[Source].[SERVICE_NAME_FR],[Source].[SERVICE_DESC_EN],[Source].[SERVICE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput770101784;

DECLARE @mergeError770101784 int,
@mergeCount770101784 int,
@mergeCountIns770101784 int,
@mergeCountUpd770101784 int,
@mergeCountDel770101784 int
SELECT @mergeError770101784 = @@ERROR
SELECT @mergeCount770101784 = COUNT(1), @mergeCountIns770101784 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd770101784 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel770101784 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput770101784
IF @mergeError770101784 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_SERVICE]. Rows affected: ' + CAST(@mergeCount770101784 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_SERVICE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount770101784,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns770101784,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd770101784,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel770101784,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_SERVICE] OFF
SET NOCOUNT OFF




