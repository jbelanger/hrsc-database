
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_COI_DECLARATION_TYPE] ON

DECLARE @mergeOutput766625774 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_COI_DECLARATION_TYPE] AS [Target]
USING (VALUES
  (1,N'OEA',N'Outside Employment or Activities:',N'Emploi à l''extérieur ou Activités:',N'Outside Employment or Activities:',N'Emploi à l''extérieur ou Activités:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(2,N'PA',N'Political Activities:',N'Activités politiques:',N'Political Activities:',N'Activités politiques:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(3,N'NPACE',N'Non-Partisan Activities in Connection with Elections:',N'Activités non partisane dans le cadre des élections:',N'Non-Partisan Activities in Connection with Elections:',N'Activités non partisane dans le cadre des élections:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(4,N'GHOB',N'Gift, Hospitality and Others Benefits:',N'Cadeaux, d''accueil et de Autres avantages:',N'Gift, Hospitality and Others Benefits:',N'Cadeaux, d''accueil et de Autres avantages:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(5,N'AL',N'Assets & Liabilities:',N'Actif et passif:',N'Assets & Liabilities:',N'Actif et passif:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(6,N'PE',N'Post-Employment:',N'Post-emploi:',N'Post-Employment:',N'Post-emploi:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(7,N'PT',N'Personal Relationships/Preferential Treatment:',N'Relations personnelles/traitement préférentiel',N'Preferential Treatment:',N'Traitement préférentiel:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(8,N'SOLIC',N'Solicitation:',N'Sollicitation:',N'Solicitation:',N'Sollicitation:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(9,N'LGC',N'Lotteries and Games of Chance:',N'Loteries et jeux de hasard:',N'Lotteries and Games of Chance:',N'Loteries et jeux de hasard:','2016-11-04T08:03:55.470',NULL,N'System',NULL,'2016-11-04T08:03:55.470',NULL,2)
 ,(10,N'COID',N'Declaration:',N'Déclaration:',N'Declaration:',N'Déclaration:','2016-11-22T00:00:00',NULL,N'eric.nolet',NULL,'2016-11-22T14:16:41.820',NULL,1)
) AS [Source] ([COI_DECLARATION_TYPE_ID],[COI_DECLARATION_TYPE_CODE],[COI_DECLARATION_TYPE_NAME_EN],[COI_DECLARATION_TYPE_NAME_FR],[COI_DECLARATION_TYPE_DESC_EN],[COI_DECLARATION_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[VERSION_ID])
ON ([Target].[COI_DECLARATION_TYPE_ID] = [Source].[COI_DECLARATION_TYPE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[COI_DECLARATION_TYPE_CODE], [Target].[COI_DECLARATION_TYPE_CODE]) IS NOT NULL OR NULLIF([Target].[COI_DECLARATION_TYPE_CODE], [Source].[COI_DECLARATION_TYPE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[COI_DECLARATION_TYPE_NAME_EN], [Target].[COI_DECLARATION_TYPE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[COI_DECLARATION_TYPE_NAME_EN], [Source].[COI_DECLARATION_TYPE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[COI_DECLARATION_TYPE_NAME_FR], [Target].[COI_DECLARATION_TYPE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[COI_DECLARATION_TYPE_NAME_FR], [Source].[COI_DECLARATION_TYPE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[COI_DECLARATION_TYPE_DESC_EN], [Target].[COI_DECLARATION_TYPE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[COI_DECLARATION_TYPE_DESC_EN], [Source].[COI_DECLARATION_TYPE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[COI_DECLARATION_TYPE_DESC_FR], [Target].[COI_DECLARATION_TYPE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[COI_DECLARATION_TYPE_DESC_FR], [Source].[COI_DECLARATION_TYPE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[VERSION_ID], [Target].[VERSION_ID]) IS NOT NULL OR NULLIF([Target].[VERSION_ID], [Source].[VERSION_ID]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[COI_DECLARATION_TYPE_CODE] = [Source].[COI_DECLARATION_TYPE_CODE], 
  [Target].[COI_DECLARATION_TYPE_NAME_EN] = [Source].[COI_DECLARATION_TYPE_NAME_EN], 
  [Target].[COI_DECLARATION_TYPE_NAME_FR] = [Source].[COI_DECLARATION_TYPE_NAME_FR], 
  [Target].[COI_DECLARATION_TYPE_DESC_EN] = [Source].[COI_DECLARATION_TYPE_DESC_EN], 
  [Target].[COI_DECLARATION_TYPE_DESC_FR] = [Source].[COI_DECLARATION_TYPE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[VERSION_ID] = [Source].[VERSION_ID]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([COI_DECLARATION_TYPE_ID],[COI_DECLARATION_TYPE_CODE],[COI_DECLARATION_TYPE_NAME_EN],[COI_DECLARATION_TYPE_NAME_FR],[COI_DECLARATION_TYPE_DESC_EN],[COI_DECLARATION_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[VERSION_ID])
 VALUES([Source].[COI_DECLARATION_TYPE_ID],[Source].[COI_DECLARATION_TYPE_CODE],[Source].[COI_DECLARATION_TYPE_NAME_EN],[Source].[COI_DECLARATION_TYPE_NAME_FR],[Source].[COI_DECLARATION_TYPE_DESC_EN],[Source].[COI_DECLARATION_TYPE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[VERSION_ID])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput766625774;

DECLARE @mergeError766625774 int,
@mergeCount766625774 int,
@mergeCountIns766625774 int,
@mergeCountUpd766625774 int,
@mergeCountDel766625774 int
SELECT @mergeError766625774 = @@ERROR
SELECT @mergeCount766625774 = COUNT(1), @mergeCountIns766625774 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd766625774 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel766625774 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput766625774
IF @mergeError766625774 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_COI_DECLARATION_TYPE]. Rows affected: ' + CAST(@mergeCount766625774 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_COI_DECLARATION_TYPE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount766625774,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns766625774,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd766625774,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel766625774,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_COI_DECLARATION_TYPE] OFF
SET NOCOUNT OFF




