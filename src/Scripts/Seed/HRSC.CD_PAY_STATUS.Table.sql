
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

DECLARE @mergeOutput1939537993 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_PAY_STATUS] AS [Target]
USING (VALUES
  (1,N'ACTIV',N'Active',N'Actif',N'Active',N'Actif',NULL,N'System',NULL,'2018-06-13T07:21:20.850',NULL,'2018-06-13T07:21:20.850')
 ,(2,N'LWOTP',N'On leave without Pay',N'En congé non-payé',N'On leave without Pay',N'En congé non-payé',NULL,N'System',NULL,'2018-06-13T07:21:20.850',NULL,'2018-06-13T07:21:20.850')
 ,(3,N'LWOP',N'LWOP requested to accept this appointment',N'CNP demandé afin d’accepter cette nomination',N'LWOP requested to accept this appointment',N'CNP demandé afin d’accepter cette nomination',NULL,N'System',NULL,'2018-06-13T07:21:20.850',NULL,'2018-06-13T07:21:20.850')
 ,(4,N'NA',N'N/A',N'S/O',N'N/A',N'S/O',NULL,N'System',NULL,'2018-06-13T07:21:20.850',NULL,'2018-06-13T07:21:20.850')
) AS [Source] ([PAY_STATUS_ID],[PAY_STATUS_CODE],[PAY_STATUS_NAME_EN],[PAY_STATUS_NAME_FR],[PAY_STATUS_DESC_EN],[PAY_STATUS_DESC_FR],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EFFECTIVE_DATE])
ON ([Target].[PAY_STATUS_ID] = [Source].[PAY_STATUS_ID])
WHEN MATCHED AND (
	NULLIF([Source].[PAY_STATUS_CODE], [Target].[PAY_STATUS_CODE]) IS NOT NULL OR NULLIF([Target].[PAY_STATUS_CODE], [Source].[PAY_STATUS_CODE]) IS NOT NULL OR 
	NULLIF([Source].[PAY_STATUS_NAME_EN], [Target].[PAY_STATUS_NAME_EN]) IS NOT NULL OR NULLIF([Target].[PAY_STATUS_NAME_EN], [Source].[PAY_STATUS_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[PAY_STATUS_NAME_FR], [Target].[PAY_STATUS_NAME_FR]) IS NOT NULL OR NULLIF([Target].[PAY_STATUS_NAME_FR], [Source].[PAY_STATUS_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[PAY_STATUS_DESC_EN], [Target].[PAY_STATUS_DESC_EN]) IS NOT NULL OR NULLIF([Target].[PAY_STATUS_DESC_EN], [Source].[PAY_STATUS_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[PAY_STATUS_DESC_FR], [Target].[PAY_STATUS_DESC_FR]) IS NOT NULL OR NULLIF([Target].[PAY_STATUS_DESC_FR], [Source].[PAY_STATUS_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[PAY_STATUS_CODE] = [Source].[PAY_STATUS_CODE], 
  [Target].[PAY_STATUS_NAME_EN] = [Source].[PAY_STATUS_NAME_EN], 
  [Target].[PAY_STATUS_NAME_FR] = [Source].[PAY_STATUS_NAME_FR], 
  [Target].[PAY_STATUS_DESC_EN] = [Source].[PAY_STATUS_DESC_EN], 
  [Target].[PAY_STATUS_DESC_FR] = [Source].[PAY_STATUS_DESC_FR], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([PAY_STATUS_ID],[PAY_STATUS_CODE],[PAY_STATUS_NAME_EN],[PAY_STATUS_NAME_FR],[PAY_STATUS_DESC_EN],[PAY_STATUS_DESC_FR],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EFFECTIVE_DATE])
 VALUES([Source].[PAY_STATUS_ID],[Source].[PAY_STATUS_CODE],[Source].[PAY_STATUS_NAME_EN],[Source].[PAY_STATUS_NAME_FR],[Source].[PAY_STATUS_DESC_EN],[Source].[PAY_STATUS_DESC_FR],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[EFFECTIVE_DATE])
OUTPUT $action INTO @mergeOutput1939537993;

DECLARE @mergeError1939537993 int,
@mergeCount1939537993 int,
@mergeCountIns1939537993 int,
@mergeCountUpd1939537993 int,
@mergeCountDel1939537993 int
SELECT @mergeError1939537993 = @@ERROR
SELECT @mergeCount1939537993 = COUNT(1), @mergeCountIns1939537993 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1939537993 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1939537993 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1939537993
IF @mergeError1939537993 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_PAY_STATUS]. Rows affected: ' + CAST(@mergeCount1939537993 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_PAY_STATUS] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1939537993,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1939537993,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1939537993,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1939537993,0) AS VARCHAR(100)) + ')' ;
 END



SET NOCOUNT OFF




