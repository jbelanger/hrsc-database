
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_STAFFING_PROCESS_STATUS] ON

DECLARE @mergeOutput594101157 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_STAFFING_PROCESS_STATUS] AS [Target]
USING (VALUES
  (1,NULL,NULL,N'HRSC 4.9','2020-01-17',NULL,NULL,N'NEW',N'New',N'Nouveau')
 ,(2,NULL,NULL,N'HRSC 4.9','2020-01-17',NULL,NULL,N'PREISL',N'Before ISL Migration',N'Avant migration ISL')
 ,(4,'2020-01-17',NULL,N'ISL_INSERT','2020-01-17',NULL,NULL,N'2',N'Completed',N'Compl?t?')
 ,(5,'2020-01-17',NULL,N'ISL_INSERT','2020-01-17',NULL,NULL,N'3',N'Completed - Unproductive',N'Compl?t? - Non productif')
 ,(13,'2020-01-17',NULL,N'ISL_INSERT','2020-01-17',NULL,NULL,N'11',N'Cancelled',N'Annul?')
 ,(18,'2020-01-17',NULL,N'ISL_INSERT','2020-01-17',NULL,NULL,N'16',N'In Progress',N'En cours')
 ,(34,'2020-01-17',NULL,N'ISL_INSERT','2020-01-17',NULL,NULL,N'33',N'In Progress',N'En cours')
) AS [Source] ([STAFFING_PROCESS_STATUS_ID],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED],[STAFFING_PROCESS_STS_CODE],[STAFFING_PROCESS_STS_NAME_EN],[STAFFING_PROCESS_STS_NAME_FR])
ON ([Target].[STAFFING_PROCESS_STATUS_ID] = [Source].[STAFFING_PROCESS_STATUS_ID])
WHEN MATCHED AND (
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[STAFFING_PROCESS_STS_CODE], [Target].[STAFFING_PROCESS_STS_CODE]) IS NOT NULL OR NULLIF([Target].[STAFFING_PROCESS_STS_CODE], [Source].[STAFFING_PROCESS_STS_CODE]) IS NOT NULL OR 
	NULLIF([Source].[STAFFING_PROCESS_STS_NAME_EN], [Target].[STAFFING_PROCESS_STS_NAME_EN]) IS NOT NULL OR NULLIF([Target].[STAFFING_PROCESS_STS_NAME_EN], [Source].[STAFFING_PROCESS_STS_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[STAFFING_PROCESS_STS_NAME_FR], [Target].[STAFFING_PROCESS_STS_NAME_FR]) IS NOT NULL OR NULLIF([Target].[STAFFING_PROCESS_STS_NAME_FR], [Source].[STAFFING_PROCESS_STS_NAME_FR]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[STAFFING_PROCESS_STS_CODE] = [Source].[STAFFING_PROCESS_STS_CODE], 
  [Target].[STAFFING_PROCESS_STS_NAME_EN] = [Source].[STAFFING_PROCESS_STS_NAME_EN], 
  [Target].[STAFFING_PROCESS_STS_NAME_FR] = [Source].[STAFFING_PROCESS_STS_NAME_FR]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([STAFFING_PROCESS_STATUS_ID],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED],[STAFFING_PROCESS_STS_CODE],[STAFFING_PROCESS_STS_NAME_EN],[STAFFING_PROCESS_STS_NAME_FR])
 VALUES([Source].[STAFFING_PROCESS_STATUS_ID],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED],[Source].[STAFFING_PROCESS_STS_CODE],[Source].[STAFFING_PROCESS_STS_NAME_EN],[Source].[STAFFING_PROCESS_STS_NAME_FR])
OUTPUT $action INTO @mergeOutput594101157;

DECLARE @mergeError594101157 int,
@mergeCount594101157 int,
@mergeCountIns594101157 int,
@mergeCountUpd594101157 int,
@mergeCountDel594101157 int
SELECT @mergeError594101157 = @@ERROR
SELECT @mergeCount594101157 = COUNT(1), @mergeCountIns594101157 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd594101157 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel594101157 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput594101157
IF @mergeError594101157 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_STAFFING_PROCESS_STATUS]. Rows affected: ' + CAST(@mergeCount594101157 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_STAFFING_PROCESS_STATUS] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount594101157,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns594101157,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd594101157,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel594101157,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_STAFFING_PROCESS_STATUS] OFF
SET NOCOUNT OFF




