
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_STUDENT_PROGRAM] ON

DECLARE @mergeOutput866102126 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_STUDENT_PROGRAM] AS [Target]
USING (VALUES
  (3,N'COOP',N'COOP – Post-Secondary Coop/Internship Program',N'COOP – Programme postsecondaire d’enseignement coopératif/de stage',N'COOP – Post-Secondary Coop/Internship Program',N'COOP – Programme postsecondaire d’enseignement coopératif/de stage','2013-01-31T11:32:38.747',NULL,N'HRDC-DRHC\elena.akhmentova','2013-01-31T11:32:38.747',N'system','2021-10-30T05:25:09.983',2)
 ,(4,N'FSWEP',N'FSWEP – Federal Student Work Experience Program',N'PFETE - Programme fédéral d’expérience de travail étudiant',N'FSWEP – Federal Student Work Experience Program',N'PFETE - Programme fédéral d’expérience de travail étudiant','2013-01-31T11:32:38.747','2018-06-13T07:21:21.193',N'HRDC-DRHC\elena.akhmentova','2013-01-31T11:32:38.747',N'system','2021-10-30T05:25:09.983',1)
 ,(5,N'RAP',N'RAP - Research Affiliate Program',N'PAR -  Programme des adjoints de recherche',N'RAP - Research Affiliate Program',N'PAR -  Programme des adjoints de recherche','2013-01-31T11:32:38.747',NULL,N'HRDC-DRHC\elena.akhmentova','2013-01-31T11:32:38.747',N'system','2021-10-30T05:25:09.987',3)
 ,(6,N'GI',N'FSWEP – General Student Recruitment Inventory',N'PFETE - Répertoire général de recrutement d’étudiants',N'FSWEP – General Student Recruitment Inventory',N'PFETE - Répertoire général de recrutement d’étudiants','2018-06-13T07:21:21.190',NULL,N'System','2018-06-13T07:21:21.190',N'system','2021-10-30T05:25:09.987',6)
 ,(7,N'YASEO',N'FSWEP – YASEO',N'PFETE - OEEAJ',N'FSWEP – YASEO',N'PFETE - OEEAJ','2018-06-13T07:21:21.190','2019-02-05T10:06:13.257',N'System','2018-06-13T07:21:21.190',N'michel.tardif','2019-02-05T10:06:13.257',1)
 ,(8,N'ISEO',N'ISEO - Indigenous Student Employment Opportunity',N'OEEA - Occasion d’emploi pour étudiants autochtones',N'ISEO - Indigenous Student Employment Opportunity',N'OEEA - Occasion d’emploi pour étudiants autochtones','2018-06-13T00:00:00',NULL,N'System','2018-06-13T07:21:21.190',N'system','2021-10-30T05:25:09.987',5)
 ,(9,N'EOSD',N'EOSD – Employment Opportunity for Students with Disabilities',N'OEESH - Occasion d’emploi pour étudiants en situation de handicap',N'EOSD – Employment Opportunity for Students with Disabilities',N'OEESH - Occasion d’emploi pour étudiants en situation de handicap','2019-02-05T00:00:00',NULL,N'michel.tardif','2019-02-05T10:06:06.850',N'system','2021-10-30T05:25:09.987',4)
 ,(10,N'CAFRS',N'Canadian Armed Forces Reservist Students Employment',N'Occasions d’emploi pour étudiants réservistes des Forces armées canadiennes',N'Canadian Armed Forces Reservist Students Employment',N'Occasions d’emploi pour étudiants réservistes des Forces armées canadiennes','2019-03-19T00:00:00','2021-10-30T05:25:26.987',N'michel.tardif','2019-03-19T09:30:43.687',N'5',NULL,1)
) AS [Source] ([STUDENT_PROGRAM_ID],[STUDENT_PROGRAM_CODE],[STUDENT_PROGRAM_NAME_EN],[STUDENT_PROGRAM_NAME_FR],[STUDENT_PROGRAM_DESC_EN],[STUDENT_PROGRAM_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED],[SORT_ORDER])
ON ([Target].[STUDENT_PROGRAM_ID] = [Source].[STUDENT_PROGRAM_ID])
WHEN MATCHED AND (
	NULLIF([Source].[STUDENT_PROGRAM_CODE], [Target].[STUDENT_PROGRAM_CODE]) IS NOT NULL OR NULLIF([Target].[STUDENT_PROGRAM_CODE], [Source].[STUDENT_PROGRAM_CODE]) IS NOT NULL OR 
	NULLIF([Source].[STUDENT_PROGRAM_NAME_EN], [Target].[STUDENT_PROGRAM_NAME_EN]) IS NOT NULL OR NULLIF([Target].[STUDENT_PROGRAM_NAME_EN], [Source].[STUDENT_PROGRAM_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[STUDENT_PROGRAM_NAME_FR], [Target].[STUDENT_PROGRAM_NAME_FR]) IS NOT NULL OR NULLIF([Target].[STUDENT_PROGRAM_NAME_FR], [Source].[STUDENT_PROGRAM_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[STUDENT_PROGRAM_DESC_EN], [Target].[STUDENT_PROGRAM_DESC_EN]) IS NOT NULL OR NULLIF([Target].[STUDENT_PROGRAM_DESC_EN], [Source].[STUDENT_PROGRAM_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[STUDENT_PROGRAM_DESC_FR], [Target].[STUDENT_PROGRAM_DESC_FR]) IS NOT NULL OR NULLIF([Target].[STUDENT_PROGRAM_DESC_FR], [Source].[STUDENT_PROGRAM_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[SORT_ORDER], [Target].[SORT_ORDER]) IS NOT NULL OR NULLIF([Target].[SORT_ORDER], [Source].[SORT_ORDER]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[STUDENT_PROGRAM_CODE] = [Source].[STUDENT_PROGRAM_CODE], 
  [Target].[STUDENT_PROGRAM_NAME_EN] = [Source].[STUDENT_PROGRAM_NAME_EN], 
  [Target].[STUDENT_PROGRAM_NAME_FR] = [Source].[STUDENT_PROGRAM_NAME_FR], 
  [Target].[STUDENT_PROGRAM_DESC_EN] = [Source].[STUDENT_PROGRAM_DESC_EN], 
  [Target].[STUDENT_PROGRAM_DESC_FR] = [Source].[STUDENT_PROGRAM_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[SORT_ORDER] = [Source].[SORT_ORDER]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([STUDENT_PROGRAM_ID],[STUDENT_PROGRAM_CODE],[STUDENT_PROGRAM_NAME_EN],[STUDENT_PROGRAM_NAME_FR],[STUDENT_PROGRAM_DESC_EN],[STUDENT_PROGRAM_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED],[SORT_ORDER])
 VALUES([Source].[STUDENT_PROGRAM_ID],[Source].[STUDENT_PROGRAM_CODE],[Source].[STUDENT_PROGRAM_NAME_EN],[Source].[STUDENT_PROGRAM_NAME_FR],[Source].[STUDENT_PROGRAM_DESC_EN],[Source].[STUDENT_PROGRAM_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED],[Source].[SORT_ORDER])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput866102126;

DECLARE @mergeError866102126 int,
@mergeCount866102126 int,
@mergeCountIns866102126 int,
@mergeCountUpd866102126 int,
@mergeCountDel866102126 int
SELECT @mergeError866102126 = @@ERROR
SELECT @mergeCount866102126 = COUNT(1), @mergeCountIns866102126 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd866102126 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel866102126 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput866102126
IF @mergeError866102126 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_STUDENT_PROGRAM]. Rows affected: ' + CAST(@mergeCount866102126 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_STUDENT_PROGRAM] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount866102126,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns866102126,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd866102126,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel866102126,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_STUDENT_PROGRAM] OFF
SET NOCOUNT OFF




