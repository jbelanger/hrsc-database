
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_TENURE_TYPE] ON

DECLARE @mergeOutput1410104064 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_TENURE_TYPE] AS [Target]
USING (VALUES
  (1,N'INDET',N'Indeterminate',N'Ind?termin?','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
 ,(2,N'TERM',N'Term',N'D?termin?','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
 ,(3,N'CAS',N'Casual',N'Occasionnel ','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
 ,(4,N'PTW',N'Part-time Worker',N'Travailleur ? temps partiel','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
 ,(5,N'STU',N'Student',N'?tudiant','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
 ,(6,N'NA',N'N/A',N'S/O','2018-06-13T07:21:19.480','2018-06-13T07:21:19.480',N'System',NULL,NULL,NULL)
) AS [Source] ([TENURE_TYPE_ID],[TENURE_TYPE_CODE],[TENURE_TYPE_NAME_EN],[TENURE_TYPE_NAME_FR],[EFFECTIVE_DATE],[DATE_CREATED],[USER_CREATED],[EXPIRY_DATE],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[TENURE_TYPE_ID] = [Source].[TENURE_TYPE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[TENURE_TYPE_CODE], [Target].[TENURE_TYPE_CODE]) IS NOT NULL OR NULLIF([Target].[TENURE_TYPE_CODE], [Source].[TENURE_TYPE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[TENURE_TYPE_NAME_EN], [Target].[TENURE_TYPE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[TENURE_TYPE_NAME_EN], [Source].[TENURE_TYPE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[TENURE_TYPE_NAME_FR], [Target].[TENURE_TYPE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[TENURE_TYPE_NAME_FR], [Source].[TENURE_TYPE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[TENURE_TYPE_CODE] = [Source].[TENURE_TYPE_CODE], 
  [Target].[TENURE_TYPE_NAME_EN] = [Source].[TENURE_TYPE_NAME_EN], 
  [Target].[TENURE_TYPE_NAME_FR] = [Source].[TENURE_TYPE_NAME_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([TENURE_TYPE_ID],[TENURE_TYPE_CODE],[TENURE_TYPE_NAME_EN],[TENURE_TYPE_NAME_FR],[EFFECTIVE_DATE],[DATE_CREATED],[USER_CREATED],[EXPIRY_DATE],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[TENURE_TYPE_ID],[Source].[TENURE_TYPE_CODE],[Source].[TENURE_TYPE_NAME_EN],[Source].[TENURE_TYPE_NAME_FR],[Source].[EFFECTIVE_DATE],[Source].[DATE_CREATED],[Source].[USER_CREATED],[Source].[EXPIRY_DATE],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput1410104064;

DECLARE @mergeError1410104064 int,
@mergeCount1410104064 int,
@mergeCountIns1410104064 int,
@mergeCountUpd1410104064 int,
@mergeCountDel1410104064 int
SELECT @mergeError1410104064 = @@ERROR
SELECT @mergeCount1410104064 = COUNT(1), @mergeCountIns1410104064 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1410104064 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1410104064 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1410104064
IF @mergeError1410104064 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_TENURE_TYPE]. Rows affected: ' + CAST(@mergeCount1410104064 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_TENURE_TYPE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1410104064,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1410104064,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1410104064,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1410104064,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_TENURE_TYPE] OFF
SET NOCOUNT OFF




