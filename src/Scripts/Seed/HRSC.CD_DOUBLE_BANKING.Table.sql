
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

DECLARE @mergeOutput839778149 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_DOUBLE_BANKING] AS [Target]
USING (VALUES
  (1,N'DBB01',N'Not a double banking situation',N'N''est pas une situation de jumelage',N'Not a double banking situation',N'N''est pas une situation de jumelage',NULL,N'Sytem',NULL,'2018-06-13T07:21:19.510',NULL,'2018-06-13T07:21:19.510')
 ,(2,N'DBB02',N'Incumbent is on leave for the duration of this staffing action',N'Le titulaire du poste est en congé pour la durée de cette action de dotation',N'Incumbent is on leave for the duration of this staffing action',N'Le  titulaire du poste est en congé pour la durée de cette action de dotation',NULL,N'Sytem',N'michel.tardif','2018-06-13T07:21:19.510','2018-09-24T15:07:27.933','2018-06-13T00:00:00')
 ,(3,N'DBB03',N'Incumbent is acting/seconded out/on assignment for the duration of this staffing action',N'Le  titulaire du poste est en intérimaire/affectation/détachement pour la durée de cette action de dotation',N'Incumbent is acting/seconded out/on assignment for the duration of this staffing action',N'Le titulaire du poste est en intérimaire/affectation/détachement pour la durée de cette action de dotation',NULL,N'Sytem',N'michel.tardif','2018-06-13T07:21:19.510','2018-09-24T15:08:00.077','2018-06-13T00:00:00')
 ,(4,N'DBB04',N'Incumbent is enrolled in full time language training for the duration of this staffing action',N'Le titulaire du poste est en formation linguistique pour la durée de cette action de dotation',N'Incumbent is enrolled in full time language training for the duration of this staffing action',N'Le titulaire du poste est en formation linguistique pour la durée de cette action de dotation',NULL,N'System',N'michel.tardif','2018-06-13T07:21:19.510','2018-09-24T15:08:28.830','2018-06-13T00:00:00')
 ,(5,N'DBB05',N'Incumbent has retired',N'Le titulaire du poste est à la retraite',N'Incumbent has retired',N'Le titulaire du poste est à la retraite',NULL,N'Sytem',N'michel.tardif','2018-06-13T07:21:19.510','2018-09-24T15:08:55.807','2018-06-13T00:00:00')
 ,(6,N'DBB06',N'Incumbent has been Appointed or deployed to another position',N'Le titulaire a été muté ou nommé dans un autre poste à l’intérieur du ministère',N'Incumbent has been Appointed or deployed to another position',N'Le titulaire a été muté ou nommé dans un autre poste à l’intérieur du ministère',NULL,N'Sytem',NULL,'2018-06-13T07:21:19.510',NULL,'2018-06-13T07:21:19.510')
 ,(7,N'DBB07',N'Incumbent has transferred out of our department',N'Le titulaire du poste a été nommé ou muté à l’extérieur du ministère',N'Incumbent has transferred out of our department',N'Le titulaire du poste a été nommé ou muté à l’extérieur du ministère',NULL,N'Sytem',NULL,'2018-06-13T07:21:19.510',NULL,'2018-06-13T07:21:19.510')
 ,(8,N'DBB08',N'Other justification, please explain in the comments section',N'Autre justification, veuillez préciser  dans la section commentaires',N'Other justification, please explain in the comments section',N'Autre justification, veuillez préciser  dans la section commentaires',NULL,N'Sytem',NULL,'2018-06-13T07:21:19.510',NULL,'2018-06-13T07:21:19.510')
) AS [Source] ([DOUBLE_BANKING_ID],[DOUBLE_BANKING_CODE],[DOUBLE_BANKING_NAME_EN],[DOUBLE_BANKING_NAME_FR],[DOUBLE_BANKING_DESC_EN],[DOUBLE_BANKING_DESC_FR],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EFFECTIVE_DATE])
ON ([Target].[DOUBLE_BANKING_ID] = [Source].[DOUBLE_BANKING_ID])
WHEN MATCHED AND (
	NULLIF([Source].[DOUBLE_BANKING_CODE], [Target].[DOUBLE_BANKING_CODE]) IS NOT NULL OR NULLIF([Target].[DOUBLE_BANKING_CODE], [Source].[DOUBLE_BANKING_CODE]) IS NOT NULL OR 
	NULLIF([Source].[DOUBLE_BANKING_NAME_EN], [Target].[DOUBLE_BANKING_NAME_EN]) IS NOT NULL OR NULLIF([Target].[DOUBLE_BANKING_NAME_EN], [Source].[DOUBLE_BANKING_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[DOUBLE_BANKING_NAME_FR], [Target].[DOUBLE_BANKING_NAME_FR]) IS NOT NULL OR NULLIF([Target].[DOUBLE_BANKING_NAME_FR], [Source].[DOUBLE_BANKING_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[DOUBLE_BANKING_DESC_EN], [Target].[DOUBLE_BANKING_DESC_EN]) IS NOT NULL OR NULLIF([Target].[DOUBLE_BANKING_DESC_EN], [Source].[DOUBLE_BANKING_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[DOUBLE_BANKING_DESC_FR], [Target].[DOUBLE_BANKING_DESC_FR]) IS NOT NULL OR NULLIF([Target].[DOUBLE_BANKING_DESC_FR], [Source].[DOUBLE_BANKING_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[DOUBLE_BANKING_CODE] = [Source].[DOUBLE_BANKING_CODE], 
  [Target].[DOUBLE_BANKING_NAME_EN] = [Source].[DOUBLE_BANKING_NAME_EN], 
  [Target].[DOUBLE_BANKING_NAME_FR] = [Source].[DOUBLE_BANKING_NAME_FR], 
  [Target].[DOUBLE_BANKING_DESC_EN] = [Source].[DOUBLE_BANKING_DESC_EN], 
  [Target].[DOUBLE_BANKING_DESC_FR] = [Source].[DOUBLE_BANKING_DESC_FR], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([DOUBLE_BANKING_ID],[DOUBLE_BANKING_CODE],[DOUBLE_BANKING_NAME_EN],[DOUBLE_BANKING_NAME_FR],[DOUBLE_BANKING_DESC_EN],[DOUBLE_BANKING_DESC_FR],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EFFECTIVE_DATE])
 VALUES([Source].[DOUBLE_BANKING_ID],[Source].[DOUBLE_BANKING_CODE],[Source].[DOUBLE_BANKING_NAME_EN],[Source].[DOUBLE_BANKING_NAME_FR],[Source].[DOUBLE_BANKING_DESC_EN],[Source].[DOUBLE_BANKING_DESC_FR],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[EFFECTIVE_DATE])
OUTPUT $action INTO @mergeOutput839778149;

DECLARE @mergeError839778149 int,
@mergeCount839778149 int,
@mergeCountIns839778149 int,
@mergeCountUpd839778149 int,
@mergeCountDel839778149 int
SELECT @mergeError839778149 = @@ERROR
SELECT @mergeCount839778149 = COUNT(1), @mergeCountIns839778149 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd839778149 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel839778149 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput839778149
IF @mergeError839778149 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_DOUBLE_BANKING]. Rows affected: ' + CAST(@mergeCount839778149 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_DOUBLE_BANKING] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount839778149,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns839778149,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd839778149,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel839778149,0) AS VARCHAR(100)) + ')' ;
 END



SET NOCOUNT OFF




