
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_SEPARATION_TYPE] ON

DECLARE @mergeOutput722101613 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_SEPARATION_TYPE] AS [Target]
USING (VALUES
  (1,N'ASSGM',N'Assignment',N'Affectation',N'Assignment',N'Affectation',NULL,'2019-07-29T09:48:57.070',N'tony.paradis','2013-05-16T09:43:15.683',NULL,NULL)
 ,(2,N'INTCG',N'Interchange',N'Échange Canada',N'Interchange',N'Échange Canada',NULL,NULL,N'tony.paradis','2013-05-16T09:44:55.467',N'michel.tardif','2018-09-24T15:04:31.900')
 ,(3,N'INTDP',N'Internal Deployment ',N'Mutation interne',N'Internal Deployment ',N'Mutation interne',NULL,'2019-07-29T09:48:57.070',N'tony.paradis','2013-05-16T09:46:40.500',N'tony.paradis','2013-05-16T10:42:54.963')
 ,(4,N'LGTLV',N'Leave Without Pay',N'Congé non payé',N'Leave Without Pay',N'Congé non payé',NULL,NULL,N'tony.paradis','2013-05-16T09:48:00.993',NULL,NULL)
 ,(5,N'RESGN',N'Resignation',N'Démission',N'Resignation',N'Démission',NULL,NULL,N'tony.paradis','2013-05-16T09:49:26.530',NULL,NULL)
 ,(6,N'RTMNT',N'Retirement',N'Retraite',N'Retirement',N'Retraite',NULL,NULL,N'tony.paradis','2013-05-16T09:50:38.777',NULL,NULL)
 ,(7,N'SCDMT',N'Secondment',N'Détachement',N'Secondment',N'Détachement',NULL,NULL,N'tony.paradis','2013-05-16T09:51:40.233',NULL,NULL)
 ,(8,N'TERMN',N'Termination',N'Cessation d''emploi',N'Termination',N'Cessation d''emploi',NULL,NULL,N'tony.paradis','2013-05-16T09:52:55.153',N'tony.paradis','2013-05-16T10:44:28.243')
 ,(9,N'TFODP',N'Transfer to Another Department ',N'Transfert vers un autre ministère',N'Transfer to Another Department ',N'Transfert vers un autre ministère',NULL,NULL,N'tony.paradis','2013-05-16T09:54:16.683',N'tony.paradis','2013-05-16T10:45:43.090')
 ,(10,N'DTHSV',N'Death in Service',N'Décès en cours de service',N'Death in Service',N'Décès en cours de service',NULL,NULL,N'yves.robichaud','2015-03-30T07:42:48.373',NULL,NULL)
 ,(11,N'SICK',N'Illness',N'Maladie',N'Illness',N'Maladie','2018-08-30T00:00:00',NULL,N'tony.paradis','2018-08-31T08:24:07.143',N'yves.robichaud','2018-09-05T13:02:31.023')
 ,(12,N'NA',N'Not specified',N'Non spécifié',N'Not specified',N'Non spécifié','2020-01-17T07:58:16.593','2020-01-17T07:58:16.593',N'HRSC 4.9','2020-01-17T07:58:16.593',NULL,NULL)
) AS [Source] ([SEPARATION_TYPE_ID],[SEPARATION_TYPE_CODE],[SEPARATION_TYPE_NAME_EN],[SEPARATION_TYPE_NAME_FR],[SEPARATION_TYPE_DESC_EN],[SEPARATION_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[SEPARATION_TYPE_ID] = [Source].[SEPARATION_TYPE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[SEPARATION_TYPE_CODE], [Target].[SEPARATION_TYPE_CODE]) IS NOT NULL OR NULLIF([Target].[SEPARATION_TYPE_CODE], [Source].[SEPARATION_TYPE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[SEPARATION_TYPE_NAME_EN], [Target].[SEPARATION_TYPE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[SEPARATION_TYPE_NAME_EN], [Source].[SEPARATION_TYPE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[SEPARATION_TYPE_NAME_FR], [Target].[SEPARATION_TYPE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[SEPARATION_TYPE_NAME_FR], [Source].[SEPARATION_TYPE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[SEPARATION_TYPE_DESC_EN], [Target].[SEPARATION_TYPE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[SEPARATION_TYPE_DESC_EN], [Source].[SEPARATION_TYPE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[SEPARATION_TYPE_DESC_FR], [Target].[SEPARATION_TYPE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[SEPARATION_TYPE_DESC_FR], [Source].[SEPARATION_TYPE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[SEPARATION_TYPE_CODE] = [Source].[SEPARATION_TYPE_CODE], 
  [Target].[SEPARATION_TYPE_NAME_EN] = [Source].[SEPARATION_TYPE_NAME_EN], 
  [Target].[SEPARATION_TYPE_NAME_FR] = [Source].[SEPARATION_TYPE_NAME_FR], 
  [Target].[SEPARATION_TYPE_DESC_EN] = [Source].[SEPARATION_TYPE_DESC_EN], 
  [Target].[SEPARATION_TYPE_DESC_FR] = [Source].[SEPARATION_TYPE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([SEPARATION_TYPE_ID],[SEPARATION_TYPE_CODE],[SEPARATION_TYPE_NAME_EN],[SEPARATION_TYPE_NAME_FR],[SEPARATION_TYPE_DESC_EN],[SEPARATION_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[SEPARATION_TYPE_ID],[Source].[SEPARATION_TYPE_CODE],[Source].[SEPARATION_TYPE_NAME_EN],[Source].[SEPARATION_TYPE_NAME_FR],[Source].[SEPARATION_TYPE_DESC_EN],[Source].[SEPARATION_TYPE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput722101613;

DECLARE @mergeError722101613 int,
@mergeCount722101613 int,
@mergeCountIns722101613 int,
@mergeCountUpd722101613 int,
@mergeCountDel722101613 int
SELECT @mergeError722101613 = @@ERROR
SELECT @mergeCount722101613 = COUNT(1), @mergeCountIns722101613 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd722101613 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel722101613 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput722101613
IF @mergeError722101613 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_SEPARATION_TYPE]. Rows affected: ' + CAST(@mergeCount722101613 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_SEPARATION_TYPE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount722101613,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns722101613,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd722101613,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel722101613,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_SEPARATION_TYPE] OFF
SET NOCOUNT OFF




