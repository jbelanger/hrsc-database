
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

DECLARE @mergeOutput917578307 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_CHKLST_STATUS] AS [Target]
USING (VALUES
  (1,N'NONAP',N'Non Applicable',N'Non applicable',NULL,NULL,'2013-05-30T00:00:00',NULL,N'yves.robichaud','2013-05-30T00:00:00',NULL,NULL)
 ,(2,N'RECOV',N'Recovered',N'Récupéré',NULL,NULL,'2013-05-30T00:00:00',NULL,N'yves.robichaud','2013-05-30T00:00:00',NULL,NULL)
 ,(3,N'RECNE',N'Recovery Necessary',N'Recouvrement nécessaire',NULL,NULL,'2013-05-30T00:00:00',NULL,N'yves.robichaud','2013-05-30T00:00:00',NULL,NULL)
 ,(4,N'UPDAT',N'Reviewed and/or Updated (Comments Required) ',N'Revu et/ou mis à jour (commentaires requis)',NULL,NULL,'2013-05-30T00:00:00',NULL,N'yves.robichaud','2013-05-30T00:00:00',NULL,NULL)
 ,(5,N'YES',N'Yes',N'Oui',N'Yes',N'Oui','2013-05-30T00:00:00',NULL,N'tony.paradis','2013-05-30T00:00:00',NULL,NULL)
 ,(6,N'NO',N'No',N'Non',N'No',N'Non','2013-05-30T00:00:00',NULL,N'tony.paradis','2013-05-30T00:00:00',NULL,NULL)
 ,(7,N'RTND',N'Returned',N'Retournés',N'Returned',N'Retournés','2015-03-30T07:42:47.407',NULL,N'Tony.paradis','2015-03-30T07:42:47.407',NULL,NULL)
 ,(8,N'CANC',N'Cancelled',N'Annulé',N'Cancelled',N'Annulé','2015-03-30T07:42:47.440',NULL,N'Tont.Paradis','2015-03-30T07:42:47.440',NULL,NULL)
) AS [Source] ([CHKLST_STATUS_ID],[CHKLST_STATUS_CODE],[CHKLST_STATUS_NAME_EN],[CHKLST_STATUS_NAME_FR],[CHKLST_STATUS_DESC_EN],[CHKLST_STATUS_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[CHKLST_STATUS_ID] = [Source].[CHKLST_STATUS_ID])
WHEN MATCHED AND (
	NULLIF([Source].[CHKLST_STATUS_CODE], [Target].[CHKLST_STATUS_CODE]) IS NOT NULL OR NULLIF([Target].[CHKLST_STATUS_CODE], [Source].[CHKLST_STATUS_CODE]) IS NOT NULL OR 
	NULLIF([Source].[CHKLST_STATUS_NAME_EN], [Target].[CHKLST_STATUS_NAME_EN]) IS NOT NULL OR NULLIF([Target].[CHKLST_STATUS_NAME_EN], [Source].[CHKLST_STATUS_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[CHKLST_STATUS_NAME_FR], [Target].[CHKLST_STATUS_NAME_FR]) IS NOT NULL OR NULLIF([Target].[CHKLST_STATUS_NAME_FR], [Source].[CHKLST_STATUS_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[CHKLST_STATUS_DESC_EN], [Target].[CHKLST_STATUS_DESC_EN]) IS NOT NULL OR NULLIF([Target].[CHKLST_STATUS_DESC_EN], [Source].[CHKLST_STATUS_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[CHKLST_STATUS_DESC_FR], [Target].[CHKLST_STATUS_DESC_FR]) IS NOT NULL OR NULLIF([Target].[CHKLST_STATUS_DESC_FR], [Source].[CHKLST_STATUS_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[CHKLST_STATUS_CODE] = [Source].[CHKLST_STATUS_CODE], 
  [Target].[CHKLST_STATUS_NAME_EN] = [Source].[CHKLST_STATUS_NAME_EN], 
  [Target].[CHKLST_STATUS_NAME_FR] = [Source].[CHKLST_STATUS_NAME_FR], 
  [Target].[CHKLST_STATUS_DESC_EN] = [Source].[CHKLST_STATUS_DESC_EN], 
  [Target].[CHKLST_STATUS_DESC_FR] = [Source].[CHKLST_STATUS_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([CHKLST_STATUS_ID],[CHKLST_STATUS_CODE],[CHKLST_STATUS_NAME_EN],[CHKLST_STATUS_NAME_FR],[CHKLST_STATUS_DESC_EN],[CHKLST_STATUS_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[CHKLST_STATUS_ID],[Source].[CHKLST_STATUS_CODE],[Source].[CHKLST_STATUS_NAME_EN],[Source].[CHKLST_STATUS_NAME_FR],[Source].[CHKLST_STATUS_DESC_EN],[Source].[CHKLST_STATUS_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput917578307;

DECLARE @mergeError917578307 int,
@mergeCount917578307 int,
@mergeCountIns917578307 int,
@mergeCountUpd917578307 int,
@mergeCountDel917578307 int
SELECT @mergeError917578307 = @@ERROR
SELECT @mergeCount917578307 = COUNT(1), @mergeCountIns917578307 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd917578307 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel917578307 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput917578307
IF @mergeError917578307 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_CHKLST_STATUS]. Rows affected: ' + CAST(@mergeCount917578307 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_CHKLST_STATUS] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount917578307,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns917578307,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd917578307,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel917578307,0) AS VARCHAR(100)) + ')' ;
 END



SET NOCOUNT OFF




