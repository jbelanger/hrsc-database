
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_CLASSIFICATION_LEVEL] ON

DECLARE @mergeOutput1874105717 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_CLASSIFICATION_LEVEL] AS [Target]
USING (VALUES
  (2,N'01',1,N'01',N'01',N'01',N'01','2013-01-10T10:43:47.783',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.783',NULL)
 ,(3,N'02',2,N'02',N'02',N'02',N'02','2013-01-10T10:43:47.787',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.787',NULL)
 ,(4,N'03',3,N'03',N'03',N'03',N'03','2013-01-10T10:43:47.787',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.787',NULL)
 ,(5,N'04',4,N'04',N'04',N'04',N'04','2013-01-10T10:43:47.787',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.787',NULL)
 ,(6,N'05',5,N'05',N'05',N'05',N'05','2013-01-10T10:43:47.787',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.787',NULL)
 ,(7,N'06',6,N'06',N'06',N'06',N'06','2013-01-10T10:43:47.790',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.790',NULL)
 ,(8,N'07',7,N'07',N'07',N'07',N'07','2013-01-10T10:43:47.790',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.790',NULL)
 ,(9,N'08',8,N'08',N'08',N'08',N'08','2013-01-10T10:43:47.790',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.790',NULL)
 ,(10,N'09',9,N'09',N'09',N'09',N'09','2013-01-10T10:43:47.790',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.790',NULL)
 ,(11,N'10',10,N'10',N'10',N'10',N'10','2013-01-10T10:43:47.790',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.790',NULL)
 ,(12,N'11',11,N'11',N'11',N'11',N'11','2013-01-10T10:43:47.793',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.793',NULL)
 ,(13,N'12',12,N'12',N'12',N'12',N'12','2013-01-10T10:43:47.793',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.793',NULL)
 ,(14,N'13',13,N'13',N'13',N'13',N'13','2013-01-10T10:43:47.797',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.797',NULL)
 ,(15,N'14',14,N'14',N'14',N'14',N'14','2013-01-10T10:43:47.797',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.797',NULL)
 ,(16,N'15',15,N'15',N'15',N'15',N'15','2013-01-10T10:43:47.797',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.797',NULL)
 ,(17,N'16',16,N'16',N'16',N'16',N'16','2013-01-10T10:43:47.797',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.797',NULL)
 ,(18,N'17',17,N'17',N'17',N'17',N'17','2013-01-10T10:43:47.800',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.800',NULL)
 ,(19,N'18',18,N'18',N'18',N'18',N'18','2013-01-10T10:43:47.800',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.800',NULL)
 ,(20,N'19',19,N'19',N'19',N'19',N'19','2013-01-10T10:43:47.800',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-10T10:43:47.800',NULL)
 ,(21,N'NAPP',0,N'Not applicable',N'Sans objet',N'Not applicable',N'Sans objet','2016-04-21T00:00:00',NULL,N'eric.nolet',NULL,'2016-04-21T07:28:38.383',NULL)
) AS [Source] ([CLASSIFICATION_LEVEL_ID],[CLASSIFICATION_LEVEL_CODE],[CLASS_LEVEL_NUMBER],[CLASS_LEVEL_NAME_EN],[CLASS_LEVEL_NAME_FR],[CLASS_LEVEL_DESC_EN],[CLASS_LEVEL_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED])
ON ([Target].[CLASSIFICATION_LEVEL_ID] = [Source].[CLASSIFICATION_LEVEL_ID])
WHEN MATCHED AND (
	NULLIF([Source].[CLASSIFICATION_LEVEL_CODE], [Target].[CLASSIFICATION_LEVEL_CODE]) IS NOT NULL OR NULLIF([Target].[CLASSIFICATION_LEVEL_CODE], [Source].[CLASSIFICATION_LEVEL_CODE]) IS NOT NULL OR 
	NULLIF([Source].[CLASS_LEVEL_NUMBER], [Target].[CLASS_LEVEL_NUMBER]) IS NOT NULL OR NULLIF([Target].[CLASS_LEVEL_NUMBER], [Source].[CLASS_LEVEL_NUMBER]) IS NOT NULL OR 
	NULLIF([Source].[CLASS_LEVEL_NAME_EN], [Target].[CLASS_LEVEL_NAME_EN]) IS NOT NULL OR NULLIF([Target].[CLASS_LEVEL_NAME_EN], [Source].[CLASS_LEVEL_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[CLASS_LEVEL_NAME_FR], [Target].[CLASS_LEVEL_NAME_FR]) IS NOT NULL OR NULLIF([Target].[CLASS_LEVEL_NAME_FR], [Source].[CLASS_LEVEL_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[CLASS_LEVEL_DESC_EN], [Target].[CLASS_LEVEL_DESC_EN]) IS NOT NULL OR NULLIF([Target].[CLASS_LEVEL_DESC_EN], [Source].[CLASS_LEVEL_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[CLASS_LEVEL_DESC_FR], [Target].[CLASS_LEVEL_DESC_FR]) IS NOT NULL OR NULLIF([Target].[CLASS_LEVEL_DESC_FR], [Source].[CLASS_LEVEL_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[CLASSIFICATION_LEVEL_CODE] = [Source].[CLASSIFICATION_LEVEL_CODE], 
  [Target].[CLASS_LEVEL_NUMBER] = [Source].[CLASS_LEVEL_NUMBER], 
  [Target].[CLASS_LEVEL_NAME_EN] = [Source].[CLASS_LEVEL_NAME_EN], 
  [Target].[CLASS_LEVEL_NAME_FR] = [Source].[CLASS_LEVEL_NAME_FR], 
  [Target].[CLASS_LEVEL_DESC_EN] = [Source].[CLASS_LEVEL_DESC_EN], 
  [Target].[CLASS_LEVEL_DESC_FR] = [Source].[CLASS_LEVEL_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([CLASSIFICATION_LEVEL_ID],[CLASSIFICATION_LEVEL_CODE],[CLASS_LEVEL_NUMBER],[CLASS_LEVEL_NAME_EN],[CLASS_LEVEL_NAME_FR],[CLASS_LEVEL_DESC_EN],[CLASS_LEVEL_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED])
 VALUES([Source].[CLASSIFICATION_LEVEL_ID],[Source].[CLASSIFICATION_LEVEL_CODE],[Source].[CLASS_LEVEL_NUMBER],[Source].[CLASS_LEVEL_NAME_EN],[Source].[CLASS_LEVEL_NAME_FR],[Source].[CLASS_LEVEL_DESC_EN],[Source].[CLASS_LEVEL_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput1874105717;

DECLARE @mergeError1874105717 int,
@mergeCount1874105717 int,
@mergeCountIns1874105717 int,
@mergeCountUpd1874105717 int,
@mergeCountDel1874105717 int
SELECT @mergeError1874105717 = @@ERROR
SELECT @mergeCount1874105717 = COUNT(1), @mergeCountIns1874105717 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1874105717 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1874105717 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1874105717
IF @mergeError1874105717 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_CLASSIFICATION_LEVEL]. Rows affected: ' + CAST(@mergeCount1874105717 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_CLASSIFICATION_LEVEL] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1874105717,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1874105717,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1874105717,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1874105717,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_CLASSIFICATION_LEVEL] OFF
SET NOCOUNT OFF




