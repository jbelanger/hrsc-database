
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

DECLARE @mergeOutput1847013661 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_REASON_FOR_SLE] AS [Target]
USING (VALUES
  (1,N'REA01',N'Bilingual Imperative staffing action',N'Action de dotation bilingue impérative',N'Bilingual Imperative staffing action',N'Action de dotation bilingue impérative','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(2,N'REA02',N'Language training (Full-Time from the Canada School of Public Service)',N'Formation linguistique à temps plein offerte par l’École de la fonction publique du Canada',N'Language training (Full-Time from the Canada School of Public Service)',N'Formation linguistique à temps plein offerte par l’École de la fonction publique du Canada','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(3,N'REA03',N'Language training (Full-Time from a departmental program)',N'Formation linguistique à temps plein offerte par les ministères',N'Language training (Full-Time from a departmental program)',N'Formation linguistique à temps plein offerte par les ministères','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(4,N'REA04',N'Language training (Part-Time from the Canada School of Public Service)',N'Formation linguistique à temps partiel dispensée par l’École de la fonction publique du Canada',N'Language training (Part-Time from the Canada School of Public Service)',N'Formation linguistique à temps partiel dispensée par l’École de la fonction publique du Canada','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(5,N'REA05',N'Language training (Part-Time from departmental program)',N'Formation linguistique à temps partiel offerte par les ministères',N'Language training (Part-Time from departmental program)',N'Formation linguistique à temps partiel offerte par les ministères','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(6,N'REA06',N'Bilingualism bonus',N'Prime au bilinguisme',N'Bilingualism bonus',N'Prime au bilinguisme','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(7,N'REA07',N'Bilingual non-Imperative staffing action',N'Action de dotation bilingue non-impérative',N'Bilingual non-Imperative staffing action',N'Action de dotation bilingue non-impérative','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(8,N'REA08',N'Re-identification',N'Réidentification',N'Re-identification',N'Réidentification','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(9,N'REA09',N'Other',N'Autre',N'Other',N'Autre','2017-07-14T07:42:44.417',NULL,N'tony.paradis','2017-07-14T07:42:44.417',NULL,NULL)
 ,(10,N'REA10',N'COVID-19 or Essential Service',N'COVID-19 ou Service essentiel',N'COVID-19 or Essential Service',N'COVID-19 ou Service essentiel',NULL,'2022-10-18T13:45:44.663',N'HRSC_DAD','2020-10-20T13:20:33.347',NULL,NULL)
) AS [Source] ([REASON_FOR_SLE_ID],[REASON_FOR_SLE_CODE],[REASON_FOR_SLE_NAME_EN],[REASON_FOR_SLE_NAME_FR],[REASON_FOR_SLE_DESC_EN],[REASON_FOR_SLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[REASON_FOR_SLE_ID] = [Source].[REASON_FOR_SLE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[REASON_FOR_SLE_CODE], [Target].[REASON_FOR_SLE_CODE]) IS NOT NULL OR NULLIF([Target].[REASON_FOR_SLE_CODE], [Source].[REASON_FOR_SLE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[REASON_FOR_SLE_NAME_EN], [Target].[REASON_FOR_SLE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[REASON_FOR_SLE_NAME_EN], [Source].[REASON_FOR_SLE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[REASON_FOR_SLE_NAME_FR], [Target].[REASON_FOR_SLE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[REASON_FOR_SLE_NAME_FR], [Source].[REASON_FOR_SLE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[REASON_FOR_SLE_DESC_EN], [Target].[REASON_FOR_SLE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[REASON_FOR_SLE_DESC_EN], [Source].[REASON_FOR_SLE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[REASON_FOR_SLE_DESC_FR], [Target].[REASON_FOR_SLE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[REASON_FOR_SLE_DESC_FR], [Source].[REASON_FOR_SLE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[REASON_FOR_SLE_CODE] = [Source].[REASON_FOR_SLE_CODE], 
  [Target].[REASON_FOR_SLE_NAME_EN] = [Source].[REASON_FOR_SLE_NAME_EN], 
  [Target].[REASON_FOR_SLE_NAME_FR] = [Source].[REASON_FOR_SLE_NAME_FR], 
  [Target].[REASON_FOR_SLE_DESC_EN] = [Source].[REASON_FOR_SLE_DESC_EN], 
  [Target].[REASON_FOR_SLE_DESC_FR] = [Source].[REASON_FOR_SLE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([REASON_FOR_SLE_ID],[REASON_FOR_SLE_CODE],[REASON_FOR_SLE_NAME_EN],[REASON_FOR_SLE_NAME_FR],[REASON_FOR_SLE_DESC_EN],[REASON_FOR_SLE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[REASON_FOR_SLE_ID],[Source].[REASON_FOR_SLE_CODE],[Source].[REASON_FOR_SLE_NAME_EN],[Source].[REASON_FOR_SLE_NAME_FR],[Source].[REASON_FOR_SLE_DESC_EN],[Source].[REASON_FOR_SLE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput1847013661;

DECLARE @mergeError1847013661 int,
@mergeCount1847013661 int,
@mergeCountIns1847013661 int,
@mergeCountUpd1847013661 int,
@mergeCountDel1847013661 int
SELECT @mergeError1847013661 = @@ERROR
SELECT @mergeCount1847013661 = COUNT(1), @mergeCountIns1847013661 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1847013661 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1847013661 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1847013661
IF @mergeError1847013661 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_REASON_FOR_SLE]. Rows affected: ' + CAST(@mergeCount1847013661 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_REASON_FOR_SLE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1847013661,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1847013661,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1847013661,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1847013661,0) AS VARCHAR(100)) + ')' ;
 END



SET NOCOUNT OFF




