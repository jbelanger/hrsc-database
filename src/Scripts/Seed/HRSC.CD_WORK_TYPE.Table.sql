
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_WORK_TYPE] ON

DECLARE @mergeOutput1186103266 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_WORK_TYPE] AS [Target]
USING (VALUES
  (9,N'EFull',N'Full-time',N'À plein temps',N'Full-time',N'À plein temps','2013-01-11T10:45:11.787',NULL,N'HRDC-DRHC\elena.akhmentova',N'Robichaud, Yves [NC]','2013-01-11T10:45:11.787','2015-03-30T07:42:48.427',1,0,NULL,1)
 ,(10,N'EPart',N'Part-time',N'À temps partiel',N'Part-time',N'À temps partiel','2013-01-11T10:45:11.793',NULL,N'HRDC-DRHC\elena.akhmentova',N'Robichaud, Yves [NC]','2013-01-11T10:45:11.793','2015-03-30T07:42:48.430',1,0,NULL,1)
 ,(11,N'Seas',N'Seasonal',N'Saisonnier',N'Seasonal',N'Saisonnier','2013-01-11T10:45:11.797',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.797',NULL,1,0,NULL,NULL)
 ,(12,N'Subst',N'Same as substantive',N'Même que substantif',N'Same as substantive',N'Même que substantif','2013-01-11T10:45:11.800',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.800',NULL,0,1,NULL,NULL)
 ,(13,N'WFull',N'Full-time (standard Mon-Fri)',N'Temps plein (standard du lundi au vendredi)',N'Full-time (standard Mon-Fri)',N'Temps plein (standard du lundi au vendredi)','2013-01-11T10:45:11.810',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.810',NULL,0,1,NULL,NULL)
 ,(14,N'WPart',N'Part-time',N'À temps partiel',N'Part-time',N'À temps partiel','2013-01-11T10:45:11.813',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.813',NULL,0,1,NULL,NULL)
 ,(15,N'SW',N'Shift Work',N'Quart de travail',N'Shift Work',N'Quart de travail','2013-01-11T10:45:11.820',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.820',NULL,0,1,NULL,NULL)
 ,(16,N'VarSW',N'Variable Shift Work',N'Quarts de travail variables',N'Variable Shift Work',N'Quarts de travail variables','2013-01-11T10:45:11.823',NULL,N'HRDC-DRHC\elena.akhmentova',NULL,'2013-01-11T10:45:11.823',NULL,0,1,NULL,NULL)
 ,(17,N'Reg',N'Regular',N'Régulier',NULL,NULL,'2015-03-30T07:42:48.390',NULL,N'1',NULL,'2015-03-30T07:42:48.390',NULL,0,0,1,NULL)
 ,(18,N'AWA',N'AWA',N'ATT',NULL,NULL,'2015-03-30T07:42:48.407',NULL,N'1',NULL,'2015-03-30T07:42:48.407',NULL,0,0,1,NULL)
 ,(19,N'Shift',N'Shift',N'Poste',NULL,NULL,'2015-03-30T07:42:48.413',NULL,N'1',NULL,'2015-03-30T07:42:48.413',NULL,0,0,1,NULL)
 ,(21,N'OnCal',N'On call',N'Sur appel',N'On call',N'Sur appel','2017-07-14T07:42:44.610',NULL,N'tony.paradis',NULL,'2017-07-14T07:42:44.610',NULL,0,1,0,0)
 ,(22,N'FSONH',N'Fixed schedule outside normal hours',N'Horaire fixe à l’extérieur des heures normales',N'Fixed schedule outside normal hours',N'Horaire fixe à l’extérieur des heures normales','2020-01-17T09:12:09.107',NULL,N'dbo',NULL,'2020-01-17T09:12:09.107',NULL,0,1,NULL,NULL)
) AS [Source] ([WORK_TYPE_ID],[WORK_TYPE_CODE],[WORK_TYPE_NAME_EN],[WORK_TYPE_NAME_FR],[WORK_TYPE_DESC_EN],[WORK_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EMPLOYMENT_IND],[SCHEDULE_IND],[OVERTIME_SCHEDULE_IND],[OVERTIME_TIME_IND])
ON ([Target].[WORK_TYPE_ID] = [Source].[WORK_TYPE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[WORK_TYPE_CODE], [Target].[WORK_TYPE_CODE]) IS NOT NULL OR NULLIF([Target].[WORK_TYPE_CODE], [Source].[WORK_TYPE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[WORK_TYPE_NAME_EN], [Target].[WORK_TYPE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[WORK_TYPE_NAME_EN], [Source].[WORK_TYPE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[WORK_TYPE_NAME_FR], [Target].[WORK_TYPE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[WORK_TYPE_NAME_FR], [Source].[WORK_TYPE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[WORK_TYPE_DESC_EN], [Target].[WORK_TYPE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[WORK_TYPE_DESC_EN], [Source].[WORK_TYPE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[WORK_TYPE_DESC_FR], [Target].[WORK_TYPE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[WORK_TYPE_DESC_FR], [Source].[WORK_TYPE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[EMPLOYMENT_IND], [Target].[EMPLOYMENT_IND]) IS NOT NULL OR NULLIF([Target].[EMPLOYMENT_IND], [Source].[EMPLOYMENT_IND]) IS NOT NULL OR 
	NULLIF([Source].[SCHEDULE_IND], [Target].[SCHEDULE_IND]) IS NOT NULL OR NULLIF([Target].[SCHEDULE_IND], [Source].[SCHEDULE_IND]) IS NOT NULL OR 
	NULLIF([Source].[OVERTIME_SCHEDULE_IND], [Target].[OVERTIME_SCHEDULE_IND]) IS NOT NULL OR NULLIF([Target].[OVERTIME_SCHEDULE_IND], [Source].[OVERTIME_SCHEDULE_IND]) IS NOT NULL OR 
	NULLIF([Source].[OVERTIME_TIME_IND], [Target].[OVERTIME_TIME_IND]) IS NOT NULL OR NULLIF([Target].[OVERTIME_TIME_IND], [Source].[OVERTIME_TIME_IND]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[WORK_TYPE_CODE] = [Source].[WORK_TYPE_CODE], 
  [Target].[WORK_TYPE_NAME_EN] = [Source].[WORK_TYPE_NAME_EN], 
  [Target].[WORK_TYPE_NAME_FR] = [Source].[WORK_TYPE_NAME_FR], 
  [Target].[WORK_TYPE_DESC_EN] = [Source].[WORK_TYPE_DESC_EN], 
  [Target].[WORK_TYPE_DESC_FR] = [Source].[WORK_TYPE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[EMPLOYMENT_IND] = [Source].[EMPLOYMENT_IND], 
  [Target].[SCHEDULE_IND] = [Source].[SCHEDULE_IND], 
  [Target].[OVERTIME_SCHEDULE_IND] = [Source].[OVERTIME_SCHEDULE_IND], 
  [Target].[OVERTIME_TIME_IND] = [Source].[OVERTIME_TIME_IND]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([WORK_TYPE_ID],[WORK_TYPE_CODE],[WORK_TYPE_NAME_EN],[WORK_TYPE_NAME_FR],[WORK_TYPE_DESC_EN],[WORK_TYPE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[EMPLOYMENT_IND],[SCHEDULE_IND],[OVERTIME_SCHEDULE_IND],[OVERTIME_TIME_IND])
 VALUES([Source].[WORK_TYPE_ID],[Source].[WORK_TYPE_CODE],[Source].[WORK_TYPE_NAME_EN],[Source].[WORK_TYPE_NAME_FR],[Source].[WORK_TYPE_DESC_EN],[Source].[WORK_TYPE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[EMPLOYMENT_IND],[Source].[SCHEDULE_IND],[Source].[OVERTIME_SCHEDULE_IND],[Source].[OVERTIME_TIME_IND])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput1186103266;

DECLARE @mergeError1186103266 int,
@mergeCount1186103266 int,
@mergeCountIns1186103266 int,
@mergeCountUpd1186103266 int,
@mergeCountDel1186103266 int
SELECT @mergeError1186103266 = @@ERROR
SELECT @mergeCount1186103266 = COUNT(1), @mergeCountIns1186103266 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1186103266 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1186103266 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1186103266
IF @mergeError1186103266 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_WORK_TYPE]. Rows affected: ' + CAST(@mergeCount1186103266 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_WORK_TYPE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1186103266,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1186103266,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1186103266,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1186103266,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_WORK_TYPE] OFF
SET NOCOUNT OFF




