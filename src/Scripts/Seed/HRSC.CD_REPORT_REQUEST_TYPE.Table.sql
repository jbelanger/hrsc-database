
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_REPORT_REQUEST_TYPE] ON

DECLARE @mergeOutput112055485 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_REPORT_REQUEST_TYPE] AS [Target]
USING (VALUES
  (1,N'RRT1',N'Re-run/ minor change to an existing report',N'Exécuter un changement mineur à un rapport existant',N'Re-run/ minor change to an existing report',N'Exécuter un changement mineur à un rapport existant','2018-06-13T07:21:20.850','2018-06-13T07:21:20.850',N'System',NULL,NULL,'2018-06-13T07:21:20.850')
 ,(2,N'RRT2',N'Create routine customized report or add a column to an existing report',N'Créez une routine de rapport personnalisé ou ajouter une colonne à un rapport existant',N'Create routine customized report or add a column to an existing report',N'Créez une routine de rapport personnalisé ou ajouter une colonne à un rapport existant','2018-06-13T00:00:00','2018-06-13T07:21:20.850',N'System',NULL,N'alejandra.tobargarzo','2018-08-17T10:29:11.653')
 ,(3,N'RRT3',N'Complex customized report',N'Complexe rapport personnalisé',N'Complex customized report',N'Complexe rapport personnalisé','2018-06-13T07:21:20.850','2018-06-13T07:21:20.850',N'System',NULL,NULL,'2018-06-13T07:21:20.850')
 ,(4,N'RRT4',N'Parliamentary questions',N'Les questions parlementaires',N'Parliamentary questions',N'Les questions parlementaires','2018-08-07T00:00:00','2018-08-07T14:08:38.493',N'yves.robichaud',NULL,NULL,'2018-08-07T14:08:38.493')
 ,(5,N'RRT5',N'ATIP',N'AIPRP',N'ATIP',N'AIPRP','2018-08-07T00:00:00','2018-08-07T14:08:54.503',N'yves.robichaud',NULL,NULL,'2018-08-07T14:08:54.503')
 ,(6,N'RRT6',N'Access to Cognos (IRIS) Reporting: Self-service',N'Accès au Cognos (SIRI) Rapports – Libre-Service',N'Access to Cognos (IRIS) Reporting: Self-service',N'Accès au Cognos (SIRI) Rapports – Libre-Service','2018-08-07T00:00:00','2018-08-07T14:09:09.327',N'yves.robichaud',NULL,N'alejandra.tobargarzo','2018-08-17T10:59:12.673')
 ,(7,N'UNUZD',N'Unused',N'Non utilisé',N'Unused',N'Non utilisé','2020-01-17T09:12:09.107','2020-01-17T09:12:09.107',N'HRSC 4.9',NULL,NULL,'2020-01-17T09:12:09.107')
) AS [Source] ([REPORT_REQUEST_TYPE_ID],[REPORT_REQUEST_TYPE_CODE],[REPORT_REQUEST_TYPE_NAME_EN],[REPORT_REQUEST_TYPE_NAME_FR],[REPORT_REQUEST_TYPE_DESC_EN],[REPORT_REQUEST_TYPE_DESC_FR],[EFFECTIVE_DATE],[DATE_CREATED],[USER_CREATED],[EXPIRY_DATE],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[REPORT_REQUEST_TYPE_ID] = [Source].[REPORT_REQUEST_TYPE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[REPORT_REQUEST_TYPE_CODE], [Target].[REPORT_REQUEST_TYPE_CODE]) IS NOT NULL OR NULLIF([Target].[REPORT_REQUEST_TYPE_CODE], [Source].[REPORT_REQUEST_TYPE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[REPORT_REQUEST_TYPE_NAME_EN], [Target].[REPORT_REQUEST_TYPE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[REPORT_REQUEST_TYPE_NAME_EN], [Source].[REPORT_REQUEST_TYPE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[REPORT_REQUEST_TYPE_NAME_FR], [Target].[REPORT_REQUEST_TYPE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[REPORT_REQUEST_TYPE_NAME_FR], [Source].[REPORT_REQUEST_TYPE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[REPORT_REQUEST_TYPE_DESC_EN], [Target].[REPORT_REQUEST_TYPE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[REPORT_REQUEST_TYPE_DESC_EN], [Source].[REPORT_REQUEST_TYPE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[REPORT_REQUEST_TYPE_DESC_FR], [Target].[REPORT_REQUEST_TYPE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[REPORT_REQUEST_TYPE_DESC_FR], [Source].[REPORT_REQUEST_TYPE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[REPORT_REQUEST_TYPE_CODE] = [Source].[REPORT_REQUEST_TYPE_CODE], 
  [Target].[REPORT_REQUEST_TYPE_NAME_EN] = [Source].[REPORT_REQUEST_TYPE_NAME_EN], 
  [Target].[REPORT_REQUEST_TYPE_NAME_FR] = [Source].[REPORT_REQUEST_TYPE_NAME_FR], 
  [Target].[REPORT_REQUEST_TYPE_DESC_EN] = [Source].[REPORT_REQUEST_TYPE_DESC_EN], 
  [Target].[REPORT_REQUEST_TYPE_DESC_FR] = [Source].[REPORT_REQUEST_TYPE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([REPORT_REQUEST_TYPE_ID],[REPORT_REQUEST_TYPE_CODE],[REPORT_REQUEST_TYPE_NAME_EN],[REPORT_REQUEST_TYPE_NAME_FR],[REPORT_REQUEST_TYPE_DESC_EN],[REPORT_REQUEST_TYPE_DESC_FR],[EFFECTIVE_DATE],[DATE_CREATED],[USER_CREATED],[EXPIRY_DATE],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[REPORT_REQUEST_TYPE_ID],[Source].[REPORT_REQUEST_TYPE_CODE],[Source].[REPORT_REQUEST_TYPE_NAME_EN],[Source].[REPORT_REQUEST_TYPE_NAME_FR],[Source].[REPORT_REQUEST_TYPE_DESC_EN],[Source].[REPORT_REQUEST_TYPE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[DATE_CREATED],[Source].[USER_CREATED],[Source].[EXPIRY_DATE],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
OUTPUT $action INTO @mergeOutput112055485;

DECLARE @mergeError112055485 int,
@mergeCount112055485 int,
@mergeCountIns112055485 int,
@mergeCountUpd112055485 int,
@mergeCountDel112055485 int
SELECT @mergeError112055485 = @@ERROR
SELECT @mergeCount112055485 = COUNT(1), @mergeCountIns112055485 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd112055485 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel112055485 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput112055485
IF @mergeError112055485 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_REPORT_REQUEST_TYPE]. Rows affected: ' + CAST(@mergeCount112055485 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_REPORT_REQUEST_TYPE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount112055485,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns112055485,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd112055485,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel112055485,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_REPORT_REQUEST_TYPE] OFF
SET NOCOUNT OFF




