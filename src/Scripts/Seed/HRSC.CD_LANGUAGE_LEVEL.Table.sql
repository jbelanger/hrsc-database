
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

DECLARE @mergeOutput1973582069 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_LANGUAGE_LEVEL] AS [Target]
USING (VALUES
  (1,N'B',N'B',N'B',N'B',N'B',NULL,NULL,N'HRDC-DRHC\oksana.zhukova','2013-02-19T11:20:20.150',NULL,NULL)
 ,(2,N'C',N'C',N'C',N'C',N'C',NULL,NULL,N'HRDC-DRHC\oksana.zhukova','2013-02-19T11:20:38.587',NULL,NULL)
 ,(3,N'P',N'P',N'P',N'P',N'P',NULL,NULL,N'HRDC-DRHC\oksana.zhukova','2013-02-19T11:20:51.497',NULL,NULL)
 ,(4,N'A',N'A',N'A',N'A',N'A',NULL,NULL,N'ISL_INSERT','2020-01-17T09:15:50.303',N'Sytem','2021-10-30T05:27:32.153')
) AS [Source] ([LANGUAGE_LEVEL_ID],[LANGUAGE_LEVEL_CODE],[LANGUAGE_LEVEL_NAME_EN],[LANGUAGE_LEVEL_NAME_FR],[LANGUAGE_LEVEL_DESC_EN],[LANGUAGE_LEVEL_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[LANGUAGE_LEVEL_ID] = [Source].[LANGUAGE_LEVEL_ID])
WHEN MATCHED AND (
	NULLIF([Source].[LANGUAGE_LEVEL_CODE], [Target].[LANGUAGE_LEVEL_CODE]) IS NOT NULL OR NULLIF([Target].[LANGUAGE_LEVEL_CODE], [Source].[LANGUAGE_LEVEL_CODE]) IS NOT NULL OR 
	NULLIF([Source].[LANGUAGE_LEVEL_NAME_EN], [Target].[LANGUAGE_LEVEL_NAME_EN]) IS NOT NULL OR NULLIF([Target].[LANGUAGE_LEVEL_NAME_EN], [Source].[LANGUAGE_LEVEL_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[LANGUAGE_LEVEL_NAME_FR], [Target].[LANGUAGE_LEVEL_NAME_FR]) IS NOT NULL OR NULLIF([Target].[LANGUAGE_LEVEL_NAME_FR], [Source].[LANGUAGE_LEVEL_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[LANGUAGE_LEVEL_DESC_EN], [Target].[LANGUAGE_LEVEL_DESC_EN]) IS NOT NULL OR NULLIF([Target].[LANGUAGE_LEVEL_DESC_EN], [Source].[LANGUAGE_LEVEL_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[LANGUAGE_LEVEL_DESC_FR], [Target].[LANGUAGE_LEVEL_DESC_FR]) IS NOT NULL OR NULLIF([Target].[LANGUAGE_LEVEL_DESC_FR], [Source].[LANGUAGE_LEVEL_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[LANGUAGE_LEVEL_CODE] = [Source].[LANGUAGE_LEVEL_CODE], 
  [Target].[LANGUAGE_LEVEL_NAME_EN] = [Source].[LANGUAGE_LEVEL_NAME_EN], 
  [Target].[LANGUAGE_LEVEL_NAME_FR] = [Source].[LANGUAGE_LEVEL_NAME_FR], 
  [Target].[LANGUAGE_LEVEL_DESC_EN] = [Source].[LANGUAGE_LEVEL_DESC_EN], 
  [Target].[LANGUAGE_LEVEL_DESC_FR] = [Source].[LANGUAGE_LEVEL_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([LANGUAGE_LEVEL_ID],[LANGUAGE_LEVEL_CODE],[LANGUAGE_LEVEL_NAME_EN],[LANGUAGE_LEVEL_NAME_FR],[LANGUAGE_LEVEL_DESC_EN],[LANGUAGE_LEVEL_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[LANGUAGE_LEVEL_ID],[Source].[LANGUAGE_LEVEL_CODE],[Source].[LANGUAGE_LEVEL_NAME_EN],[Source].[LANGUAGE_LEVEL_NAME_FR],[Source].[LANGUAGE_LEVEL_DESC_EN],[Source].[LANGUAGE_LEVEL_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput1973582069;

DECLARE @mergeError1973582069 int,
@mergeCount1973582069 int,
@mergeCountIns1973582069 int,
@mergeCountUpd1973582069 int,
@mergeCountDel1973582069 int
SELECT @mergeError1973582069 = @@ERROR
SELECT @mergeCount1973582069 = COUNT(1), @mergeCountIns1973582069 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1973582069 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1973582069 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1973582069
IF @mergeError1973582069 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_LANGUAGE_LEVEL]. Rows affected: ' + CAST(@mergeCount1973582069 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_LANGUAGE_LEVEL] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1973582069,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1973582069,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1973582069,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1973582069,0) AS VARCHAR(100)) + ')' ;
 END



SET NOCOUNT OFF




