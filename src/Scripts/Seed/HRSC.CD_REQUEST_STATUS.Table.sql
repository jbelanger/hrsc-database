
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_REQUEST_STATUS] ON

DECLARE @mergeOutput562101043 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_REQUEST_STATUS] AS [Target]
USING (VALUES
  (15,N'New Request',N'Nouvelle demande',N'New Request',N'Nouvelle demande','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'NEW',0)
 ,(16,N'Processing',N'En traitement',N'Processing',N'En traitement','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'PROC',0)
 ,(17,N'Resolved',N'Résolue',N'Resolved',N'Résolue','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'CLOSE',0)
 ,(18,N'Transferred',N'Transférée',N'Transferred',N'Transférée','2011-12-09T00:00:00',NULL,N'Gaétan',NULL,'2011-12-09T00:00:00',NULL,N'TSF',0)
 ,(19,N'Assigned',N'Assignée',N'Assigned',N'Assignée','2012-02-04T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-04T00:00:00',NULL,N'ASGN',0)
 ,(20,N'Pending',N'En Attente',N'Pending',N'En Attente','2012-02-04T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-04T00:00:00',NULL,N'WAIT',0)
 ,(21,N'No Action',N'Sans Action',N'No Action',N'Sans Action','2012-02-04T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-04T00:00:00',NULL,N'NOACT',0)
 ,(28,N'Declined',N'Refusée',N'Declined',N'Refusée','2012-02-04T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-04T00:00:00',NULL,N'REJ',0)
 ,(33,N'Auto-Transferred',N'Auto-Transférée',N'Auto-Transferred',N'Auto-Transférée','2012-02-14T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-14T00:00:00',NULL,N'ATSF',0)
 ,(34,N'New',N'Nouvelle',N'New - Updated',N'Nouv. - Mise à jour ','2012-02-14T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-14T00:00:00',NULL,N'NUPD',0)
 ,(37,N'Cancelled',N'Annulée',N'Cancelled',N'Annulée','2012-02-14T00:00:00',NULL,N'Éric Nolet',NULL,'2012-02-14T00:00:00',NULL,N'CANC',0)
 ,(38,N'Returned to client',N'Retournée au client',N'Returned to client',N'Retournée au client','2013-01-31T16:42:44.497',NULL,N'HRDC-DRHC\oksana.zhukova',NULL,'2013-01-31T16:42:44.497',NULL,N'RTRNC',0)
 ,(39,N'Pending Signature',N'En attente de signature',N'Pending Signature',N'En attente de signature','2013-01-31T16:42:44.527',NULL,N'HRDC-DRHC\oksana.zhukova',NULL,'2013-01-31T16:42:44.527',NULL,N'WSIGN',0)
 ,(40,N'Modified',N'Modifiée',N'Modified',N'Modifiée','2013-03-01T11:42:22.240',NULL,N'tony.paradis',NULL,'2013-03-01T11:42:22.240',NULL,N'RTNFC',0)
 ,(42,N'Signed document',N'Document signé',N'Signed document',N'Document signé','2013-03-04T09:12:54.230',NULL,N'tony.paradis',NULL,'2013-03-04T09:12:54.230',NULL,N'SIGND',0)
) AS [Source] ([REQUEST_STATUS_ID],[REQUEST_STATUS_NAME_EN],[REQUEST_STATUS_NAME_FR],[REQUEST_STATUS_DESC_EN],[REQUEST_STATUS_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[REQUEST_STATUS_CODE],[PRODUCTIVITY_IND])
ON ([Target].[REQUEST_STATUS_ID] = [Source].[REQUEST_STATUS_ID])
WHEN MATCHED AND (
	NULLIF([Source].[REQUEST_STATUS_NAME_EN], [Target].[REQUEST_STATUS_NAME_EN]) IS NOT NULL OR NULLIF([Target].[REQUEST_STATUS_NAME_EN], [Source].[REQUEST_STATUS_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[REQUEST_STATUS_NAME_FR], [Target].[REQUEST_STATUS_NAME_FR]) IS NOT NULL OR NULLIF([Target].[REQUEST_STATUS_NAME_FR], [Source].[REQUEST_STATUS_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[REQUEST_STATUS_DESC_EN], [Target].[REQUEST_STATUS_DESC_EN]) IS NOT NULL OR NULLIF([Target].[REQUEST_STATUS_DESC_EN], [Source].[REQUEST_STATUS_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[REQUEST_STATUS_DESC_FR], [Target].[REQUEST_STATUS_DESC_FR]) IS NOT NULL OR NULLIF([Target].[REQUEST_STATUS_DESC_FR], [Source].[REQUEST_STATUS_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[REQUEST_STATUS_CODE], [Target].[REQUEST_STATUS_CODE]) IS NOT NULL OR NULLIF([Target].[REQUEST_STATUS_CODE], [Source].[REQUEST_STATUS_CODE]) IS NOT NULL OR 
	NULLIF([Source].[PRODUCTIVITY_IND], [Target].[PRODUCTIVITY_IND]) IS NOT NULL OR NULLIF([Target].[PRODUCTIVITY_IND], [Source].[PRODUCTIVITY_IND]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[REQUEST_STATUS_NAME_EN] = [Source].[REQUEST_STATUS_NAME_EN], 
  [Target].[REQUEST_STATUS_NAME_FR] = [Source].[REQUEST_STATUS_NAME_FR], 
  [Target].[REQUEST_STATUS_DESC_EN] = [Source].[REQUEST_STATUS_DESC_EN], 
  [Target].[REQUEST_STATUS_DESC_FR] = [Source].[REQUEST_STATUS_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[REQUEST_STATUS_CODE] = [Source].[REQUEST_STATUS_CODE], 
  [Target].[PRODUCTIVITY_IND] = [Source].[PRODUCTIVITY_IND]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([REQUEST_STATUS_ID],[REQUEST_STATUS_NAME_EN],[REQUEST_STATUS_NAME_FR],[REQUEST_STATUS_DESC_EN],[REQUEST_STATUS_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[REQUEST_STATUS_CODE],[PRODUCTIVITY_IND])
 VALUES([Source].[REQUEST_STATUS_ID],[Source].[REQUEST_STATUS_NAME_EN],[Source].[REQUEST_STATUS_NAME_FR],[Source].[REQUEST_STATUS_DESC_EN],[Source].[REQUEST_STATUS_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[REQUEST_STATUS_CODE],[Source].[PRODUCTIVITY_IND])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput562101043;

DECLARE @mergeError562101043 int,
@mergeCount562101043 int,
@mergeCountIns562101043 int,
@mergeCountUpd562101043 int,
@mergeCountDel562101043 int
SELECT @mergeError562101043 = @@ERROR
SELECT @mergeCount562101043 = COUNT(1), @mergeCountIns562101043 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd562101043 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel562101043 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput562101043
IF @mergeError562101043 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_REQUEST_STATUS]. Rows affected: ' + CAST(@mergeCount562101043 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_REQUEST_STATUS] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount562101043,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns562101043,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd562101043,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel562101043,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_REQUEST_STATUS] OFF
SET NOCOUNT OFF




