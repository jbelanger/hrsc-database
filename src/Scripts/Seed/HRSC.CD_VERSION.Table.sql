
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_VERSION] ON

DECLARE @mergeOutput1138103095 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_VERSION] AS [Target]
USING (VALUES
  (1,N'V1',N'Version 1',N'Version 1',N'Version 1','2016-11-04T00:00:00',NULL,N'System',N'yves.robichaud','2016-11-04T08:03:55.213','2016-11-04T08:23:17.280',N'Version 1')
 ,(2,N'V2',N'Version 2',N'Version 2',N'Version 2','2016-11-04T00:00:00',NULL,N'System',N'yves.robichaud','2016-11-04T08:03:55.213','2016-11-04T08:23:23.390',N'Version 2')
) AS [Source] ([VERSION_ID],[VERSION_CODE],[VERSION_NAME_EN],[VERSION_NAME_FR],[VERSION_DESC_EN],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[VERSION_DESC_FR])
ON ([Target].[VERSION_ID] = [Source].[VERSION_ID])
WHEN MATCHED AND (
	NULLIF([Source].[VERSION_CODE], [Target].[VERSION_CODE]) IS NOT NULL OR NULLIF([Target].[VERSION_CODE], [Source].[VERSION_CODE]) IS NOT NULL OR 
	NULLIF([Source].[VERSION_NAME_EN], [Target].[VERSION_NAME_EN]) IS NOT NULL OR NULLIF([Target].[VERSION_NAME_EN], [Source].[VERSION_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[VERSION_NAME_FR], [Target].[VERSION_NAME_FR]) IS NOT NULL OR NULLIF([Target].[VERSION_NAME_FR], [Source].[VERSION_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[VERSION_DESC_EN], [Target].[VERSION_DESC_EN]) IS NOT NULL OR NULLIF([Target].[VERSION_DESC_EN], [Source].[VERSION_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[VERSION_DESC_FR], [Target].[VERSION_DESC_FR]) IS NOT NULL OR NULLIF([Target].[VERSION_DESC_FR], [Source].[VERSION_DESC_FR]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[VERSION_CODE] = [Source].[VERSION_CODE], 
  [Target].[VERSION_NAME_EN] = [Source].[VERSION_NAME_EN], 
  [Target].[VERSION_NAME_FR] = [Source].[VERSION_NAME_FR], 
  [Target].[VERSION_DESC_EN] = [Source].[VERSION_DESC_EN], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED], 
  [Target].[VERSION_DESC_FR] = [Source].[VERSION_DESC_FR]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([VERSION_ID],[VERSION_CODE],[VERSION_NAME_EN],[VERSION_NAME_FR],[VERSION_DESC_EN],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[USER_UPDATED],[DATE_CREATED],[DATE_UPDATED],[VERSION_DESC_FR])
 VALUES([Source].[VERSION_ID],[Source].[VERSION_CODE],[Source].[VERSION_NAME_EN],[Source].[VERSION_NAME_FR],[Source].[VERSION_DESC_EN],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[USER_UPDATED],[Source].[DATE_CREATED],[Source].[DATE_UPDATED],[Source].[VERSION_DESC_FR])
OUTPUT $action INTO @mergeOutput1138103095;

DECLARE @mergeError1138103095 int,
@mergeCount1138103095 int,
@mergeCountIns1138103095 int,
@mergeCountUpd1138103095 int,
@mergeCountDel1138103095 int
SELECT @mergeError1138103095 = @@ERROR
SELECT @mergeCount1138103095 = COUNT(1), @mergeCountIns1138103095 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd1138103095 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel1138103095 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput1138103095
IF @mergeError1138103095 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_VERSION]. Rows affected: ' + CAST(@mergeCount1138103095 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_VERSION] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount1138103095,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns1138103095,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd1138103095,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel1138103095,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_VERSION] OFF
SET NOCOUNT OFF




