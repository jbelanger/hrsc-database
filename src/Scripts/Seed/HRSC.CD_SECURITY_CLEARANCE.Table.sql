
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [HRSC].[CD_SECURITY_CLEARANCE] ON

DECLARE @mergeOutput626101271 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [HRSC].[CD_SECURITY_CLEARANCE] AS [Target]
USING (VALUES
  (1,N'Conf',N'Confidential',N'Confidentiel',N'Confidential',N'Confidentiel','2013-01-10T11:39:19.157','2018-06-13T07:21:21.197',N'HRDC-DRHC\elena.akhmentova','2013-01-10T11:39:19.157',NULL,NULL)
 ,(2,N'Secr',N'Secret',N'Secret',N'Secret',N'Secret','2013-01-10T11:39:19.157',NULL,N'HRDC-DRHC\elena.akhmentova','2013-01-10T11:39:19.157',NULL,NULL)
 ,(3,N'TopS',N'Top Secret',N'Très secret',N'Top Secret',N'Très secret','2013-01-10T11:39:19.157',NULL,N'HRDC-DRHC\elena.akhmentova','2013-01-10T11:39:19.157',NULL,NULL)
 ,(4,N'RelSt',N'Reliability Status',N'Cote de fiabilité',N'Reliability Status',N'Cote de fiabilité','2013-01-10T11:39:19.160',NULL,N'HRDC-DRHC\elena.akhmentova','2013-01-10T11:39:19.160',NULL,NULL)
 ,(5,N'ER',N'Enhanced reliability',N'Fiabilité approfondie',N'Enhanced reliability',N'Fiabilité approfondie','2020-01-09T13:30:15.733',NULL,N'System','2020-01-09T13:30:15.733',NULL,NULL)
 ,(6,N'ES',N'Enhanced secret',N'Secret approfondie',N'Enhanced secret',N'Secret approfondie','2020-01-09T13:30:15.733',NULL,N'System','2020-01-09T13:30:15.733',NULL,NULL)
 ,(7,N'ETS',N'Enhanced top secret',N'Très secret approfondie',N'Enhanced top secret',N'Très secret approfondie','2020-01-09T13:30:15.733',NULL,N'System','2020-01-09T13:30:15.733',NULL,NULL)
) AS [Source] ([SECURITY_CLEARANCE_ID],[SECURITY_CLEARANCE_CODE],[SECURITY_CLEARANCE_NAME_EN],[SECURITY_CLEARANCE_NAME_FR],[SECURITY_CLEARANCE_DESC_EN],[SECURITY_CLEARANCE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
ON ([Target].[SECURITY_CLEARANCE_ID] = [Source].[SECURITY_CLEARANCE_ID])
WHEN MATCHED AND (
	NULLIF([Source].[SECURITY_CLEARANCE_CODE], [Target].[SECURITY_CLEARANCE_CODE]) IS NOT NULL OR NULLIF([Target].[SECURITY_CLEARANCE_CODE], [Source].[SECURITY_CLEARANCE_CODE]) IS NOT NULL OR 
	NULLIF([Source].[SECURITY_CLEARANCE_NAME_EN], [Target].[SECURITY_CLEARANCE_NAME_EN]) IS NOT NULL OR NULLIF([Target].[SECURITY_CLEARANCE_NAME_EN], [Source].[SECURITY_CLEARANCE_NAME_EN]) IS NOT NULL OR 
	NULLIF([Source].[SECURITY_CLEARANCE_NAME_FR], [Target].[SECURITY_CLEARANCE_NAME_FR]) IS NOT NULL OR NULLIF([Target].[SECURITY_CLEARANCE_NAME_FR], [Source].[SECURITY_CLEARANCE_NAME_FR]) IS NOT NULL OR 
	NULLIF([Source].[SECURITY_CLEARANCE_DESC_EN], [Target].[SECURITY_CLEARANCE_DESC_EN]) IS NOT NULL OR NULLIF([Target].[SECURITY_CLEARANCE_DESC_EN], [Source].[SECURITY_CLEARANCE_DESC_EN]) IS NOT NULL OR 
	NULLIF([Source].[SECURITY_CLEARANCE_DESC_FR], [Target].[SECURITY_CLEARANCE_DESC_FR]) IS NOT NULL OR NULLIF([Target].[SECURITY_CLEARANCE_DESC_FR], [Source].[SECURITY_CLEARANCE_DESC_FR]) IS NOT NULL OR 
	NULLIF([Source].[EFFECTIVE_DATE], [Target].[EFFECTIVE_DATE]) IS NOT NULL OR NULLIF([Target].[EFFECTIVE_DATE], [Source].[EFFECTIVE_DATE]) IS NOT NULL OR 
	NULLIF([Source].[EXPIRY_DATE], [Target].[EXPIRY_DATE]) IS NOT NULL OR NULLIF([Target].[EXPIRY_DATE], [Source].[EXPIRY_DATE]) IS NOT NULL OR 
	NULLIF([Source].[USER_CREATED], [Target].[USER_CREATED]) IS NOT NULL OR NULLIF([Target].[USER_CREATED], [Source].[USER_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_CREATED], [Target].[DATE_CREATED]) IS NOT NULL OR NULLIF([Target].[DATE_CREATED], [Source].[DATE_CREATED]) IS NOT NULL OR 
	NULLIF([Source].[USER_UPDATED], [Target].[USER_UPDATED]) IS NOT NULL OR NULLIF([Target].[USER_UPDATED], [Source].[USER_UPDATED]) IS NOT NULL OR 
	NULLIF([Source].[DATE_UPDATED], [Target].[DATE_UPDATED]) IS NOT NULL OR NULLIF([Target].[DATE_UPDATED], [Source].[DATE_UPDATED]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[SECURITY_CLEARANCE_CODE] = [Source].[SECURITY_CLEARANCE_CODE], 
  [Target].[SECURITY_CLEARANCE_NAME_EN] = [Source].[SECURITY_CLEARANCE_NAME_EN], 
  [Target].[SECURITY_CLEARANCE_NAME_FR] = [Source].[SECURITY_CLEARANCE_NAME_FR], 
  [Target].[SECURITY_CLEARANCE_DESC_EN] = [Source].[SECURITY_CLEARANCE_DESC_EN], 
  [Target].[SECURITY_CLEARANCE_DESC_FR] = [Source].[SECURITY_CLEARANCE_DESC_FR], 
  [Target].[EFFECTIVE_DATE] = [Source].[EFFECTIVE_DATE], 
  [Target].[EXPIRY_DATE] = [Source].[EXPIRY_DATE], 
  [Target].[USER_CREATED] = [Source].[USER_CREATED], 
  [Target].[DATE_CREATED] = [Source].[DATE_CREATED], 
  [Target].[USER_UPDATED] = [Source].[USER_UPDATED], 
  [Target].[DATE_UPDATED] = [Source].[DATE_UPDATED]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([SECURITY_CLEARANCE_ID],[SECURITY_CLEARANCE_CODE],[SECURITY_CLEARANCE_NAME_EN],[SECURITY_CLEARANCE_NAME_FR],[SECURITY_CLEARANCE_DESC_EN],[SECURITY_CLEARANCE_DESC_FR],[EFFECTIVE_DATE],[EXPIRY_DATE],[USER_CREATED],[DATE_CREATED],[USER_UPDATED],[DATE_UPDATED])
 VALUES([Source].[SECURITY_CLEARANCE_ID],[Source].[SECURITY_CLEARANCE_CODE],[Source].[SECURITY_CLEARANCE_NAME_EN],[Source].[SECURITY_CLEARANCE_NAME_FR],[Source].[SECURITY_CLEARANCE_DESC_EN],[Source].[SECURITY_CLEARANCE_DESC_FR],[Source].[EFFECTIVE_DATE],[Source].[EXPIRY_DATE],[Source].[USER_CREATED],[Source].[DATE_CREATED],[Source].[USER_UPDATED],[Source].[DATE_UPDATED])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput626101271;

DECLARE @mergeError626101271 int,
@mergeCount626101271 int,
@mergeCountIns626101271 int,
@mergeCountUpd626101271 int,
@mergeCountDel626101271 int
SELECT @mergeError626101271 = @@ERROR
SELECT @mergeCount626101271 = COUNT(1), @mergeCountIns626101271 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd626101271 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel626101271 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput626101271
IF @mergeError626101271 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [HRSC].[CD_SECURITY_CLEARANCE]. Rows affected: ' + CAST(@mergeCount626101271 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[HRSC].[CD_SECURITY_CLEARANCE] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount626101271,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns626101271,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd626101271,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel626101271,0) AS VARCHAR(100)) + ')' ;
 END




SET IDENTITY_INSERT [HRSC].[CD_SECURITY_CLEARANCE] OFF
SET NOCOUNT OFF




